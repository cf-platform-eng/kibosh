---
resource_types:
- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

resources:
- name: source-repo
  type: git
  source:
    branch: master
    ignore_paths:
    - ci/*
    - README.md
    uri: https://github.com/cf-platform-eng/kibosh
    username: cf-pe-bot
    password: {{github_token}}

- name: cf-cli
  type: bosh-io-release
  source:
    repository: bosh-packages/cf-cli-release

- name: tiller-image
  type: docker-image
  source:
    repository: gcr.io/kubernetes-helm/tiller
    tag: "v2.9.0"

- name: tiller-image-fixed
  type: gcs-resource
  source:
    bucket: kibosh
    json_key: {{gcp_service_account_key}}
    regexp: images/tiller-(?P<version>.*).tgz

# reminder: how do we auto-consume production releases?
# they're releases alpha tags, which we don't want to consume
- name: on-demand-service-broker
  type: git
  source:
    branch: v0.20.0
    uri: https://github.com/pivotal-cf/on-demand-service-broker
    username: cf-pe-bot
    password: {{github_token}}

- name: release-repo
  type: github-release
  source:
    owner: cf-platform-eng
    repository: kibosh
    access_token: {{github_token}}

- name: version
  type: semver
  source:
    driver: git
    uri: git@github.com:cf-platform-eng/kibosh
    branch: version
    file: version/version
    initial_version: 0.0.1
    private_key: {{github_deploy_key}}

- name: kibosh-release
  type: gcs-resource
  source:
    bucket: kibosh
    json_key: {{gcp_service_account_key}}
    regexp: kibosh-release-(?P<version>.*).tgz

- name: kibosh-linux
  type: gcs-resource
  source:
    bucket: kibosh
    json_key: {{gcp_service_account_key}}
    regexp: kibosh-(?P<version>.*).linux

- name: kibosh-darwin
  type: gcs-resource
  source:
    bucket: kibosh
    json_key: {{gcp_service_account_key}}
    regexp: kibosh-(?P<version>.*).darwin

- name: loader-linux
  type: gcs-resource
  source:
    bucket: kibosh
    json_key: {{gcp_service_account_key}}
    regexp: loader-(?P<version>.*).linux

- name: bazaar-linux
  type: gcs-resource
  source:
    bucket: kibosh
    json_key: {{gcp_service_account_key}}
    regexp: bazaar-(?P<version>.*).linux

- name: delete-all-and-deregister
  type: gcs-resource
  source:
    bucket: kibosh-public
    json_key: {{gcp_service_account_key}}
    regexp: delete_all_and_deregister.linux

- name: bazaarcli-linux
  type: gcs-resource
  source:
    bucket: kibosh
    json_key: {{gcp_service_account_key}}
    regexp: bazaarcli-(?P<version>.*).linux

- name: bazaarcli-mac
  type: gcs-resource
  source:
    bucket: kibosh
    json_key: {{gcp_service_account_key}}
    regexp: bazaarcli-(?P<version>.*).mac

- name: cf-cli-release
  type: github-release
  source:
    owner: cloudfoundry
    repository: cli
    access_token: {{github_token}}

- name: cf-cli-binary
  type: gcs-resource
  source:
    bucket: kibosh
    json_key: {{gcp_service_account_key}}
    regexp: cf-cli.tgz

- name: cf-deployment-concourse-tasks
  type: git
  source:
    branch: master
    tag_filter: v6.11
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks.git

- name: lite-stemcell-fixed
  type: bosh-io-stemcell
  source:
    name: bosh-google-kvm-ubuntu-trusty-go_agent
    # 3586.18 (latest at time of this commit) is broken for gcp
    version_family: '3586.16'

- name: kibosh-ci-state
  type: git
  source:
    branch: master
    uri: git@github.com:cf-platform-eng/kibosh-ci-state
    private_key: {{github_state_repo_deploy_key}}

- name: spacebears-image
  type: docker-image
  source:
    repository: cfplatformeng/spacebears

- name: cf-deployment-concourse-tasks-docker
  type: docker-image
  source:
    tag: v5.11.0
    repository: relintdockerhubpushbot/cf-deployment-concourse-tasks

- name: docker-bosh-release
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: docker-boshrelease
    access_token: {{github_token}}
    globs:
    - docker-*.tgz

- name: slack-ci-alert
  type: slack-notification
  source:
    url: {{slack_ci_alert_url}}

slack_on_failure: &slack_on_failure
  put: slack-ci-alert
  params:
    icon_emoji: ":concourse-failed:"
    username: Concourse CI
    channel: "#pe-kubism"
    text: "Kibosh has a CI failure, see https://concourse.cfplatformeng.com/teams/main/pipelines/kibosh"

jobs:
- name: setup-infrastructure-lite
  plan:
  - aggregate:
    - get: kibosh-ci-state
    - get: cf-deployment-concourse-tasks
  - task: setup-infrastructure
    file: cf-deployment-concourse-tasks/bbl-up/task.yml
    params:
      BBL_IAAS: gcp
      BBL_GCP_SERVICE_ACCOUNT_KEY: {{gcp_service_account_key}}
      BBL_GCP_REGION: us-central1
      SKIP_LB_CREATION: true
    input_mapping:
      bbl-state: kibosh-ci-state
      bbl-config: kibosh-ci-state
    ensure:
      put: kibosh-ci-state
      params:
        repository: updated-bbl-state
        rebase: true


- name: teardown-infrastructure-lite
  plan:
  - aggregate:
    - get: kibosh-ci-state
      passed: [setup-infrastructure-lite]
    - get: cf-deployment-concourse-tasks
  - task: setup-infrastructure
    file: cf-deployment-concourse-tasks/bbl-destroy/task.yml
    params:
      BBL_GCP_SERVICE_ACCOUNT_KEY: {{gcp_service_account_key}}
    input_mapping:
      bbl-state: kibosh-ci-state
    ensure:
      put: kibosh-ci-state
      params:
        repository: updated-bbl-state
        rebase: true


- name: store-cli
  plan:
  - aggregate:
    - get: cf-cli-release
      trigger: true
  - task: do-store-cli
    config:
      inputs:
      - name: cf-cli-release
      outputs:
      - name: output
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: golang
          tag: "1.9"
      run:
        path: bash
        args:
        - -exc
        - |
          set -ex

          pushd cf-cli-release
          wget "https://packages.cloudfoundry.org/stable?release=linux64-binary&version=$(cat version)" -O cf-cli.tgz
          popd

          mv cf-cli-release/cf-cli.tgz output
    on_failure: *slack_on_failure
  - put: cf-cli-binary
    params:
      file: output/cf-cli.tgz


- name: build-delete-all-and-deregister
  plan:
  - aggregate:
    - get: on-demand-service-broker
      trigger: true
  - task: build-binary
    config:
      inputs:
      - name: on-demand-service-broker
      outputs:
      - name: output
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: golang
          tag: "1.9"
      run:
        path: bash
        args:
        - -exc
        - |
          set -ex

          export SRC=/go/src/github.com/pivotal-cf/on-demand-service-broker
          mkdir -p $SRC
          cp -r on-demand-service-broker/* $SRC

          pushd $SRC
          GOOS=linux GOARCH=amd64 go build \
              -o delete_all_and_deregister.linux \
              cmd/delete-all-service-instances-and-deregister-broker/delete_all_service_instances_and_deregister_broker.go
          popd

          cp $SRC/delete_all_and_deregister.linux output/delete_all_and_deregister.linux
    on_failure: *slack_on_failure
  - put: delete-all-and-deregister
    params:
      file: output/delete_all_and_deregister.linux
      predefined_acl: publicRead


- name: tiller-version-check
  plan:
  - aggregate:
    - get: tiller-image
    - get: source-repo
      trigger: true
  - task: do-tiller-version-check
    config:
      inputs:
      - name: tiller-image
      - name: source-repo
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: golang
          tag: "1.9"
      run:
        path: bash
        args:
        - -exc
        - |
          set -e

          if cmp tiller-image/tag source-repo/tiller-version; then
            echo "Ok: $(cat tiller-image/tag) $(cat source-repo/tiller-version)"
          else
            echo "
              CI is including tiller version: $(cat tiller-image/tag)
              Build is using tiller version: $(cat source-repo/tiller-version)
              Failing due to mismatch"
            exit 1
          fi
    on_failure: *slack_on_failure

- name: unit-tests
  plan:
  - aggregate:
    - get: source-repo
      passed: [tiller-version-check]
      trigger: true
    - get: version
  - task: run-tests
    config:
      inputs:
      - name: source-repo
      - name: version
      outputs:
      - name: output
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: golang
          tag: "1.9"
      run:
        path: bash
        args:
        - -exc
        - |
          go get github.com/onsi/ginkgo/ginkgo
          go get github.com/onsi/gomega

          export SRC=/go/src/github.com/cf-platform-eng/kibosh
          mkdir -p $SRC
          cp -r source-repo/* $SRC

          pushd $SRC
          # make cleandep
          make bootstrap
          make test
          make build
          make build-loader
          make build-bazaar
          make build-bazaar-cli
          popd

          export VERSION=`cat version/version`

          cp $SRC/kibosh.darwin output/kibosh-${VERSION}.darwin
          cp $SRC/kibosh.linux output/kibosh-${VERSION}.linux
          cp $SRC/loader.linux output/loader-${VERSION}.linux
          cp $SRC/bazaar.linux output/bazaar-${VERSION}.linux
          cp $SRC/bazaarcli.mac output/bazaarcli-${VERSION}.mac
          cp $SRC/bazaarcli.linux output/bazaarcli-${VERSION}.linux
    on_failure: *slack_on_failure
  - put: kibosh-linux
    params:
      file: output/kibosh-*.linux
  - put: kibosh-darwin
    params:
      file: output/kibosh-*.darwin
  - put: loader-linux
    params:
      file: output/loader-*.linux
  - put: bazaar-linux
    params:
      file: output/bazaar-*.linux
  - put: bazaarcli-linux
    params:
      file: output/bazaarcli-*.linux
  - put: bazaarcli-mac
    params:
      file: output/bazaarcli-*.mac
  - put: version
    params:
      bump: patch


- name: build-boshrelease
  plan:
  - aggregate:
    - get: source-repo
      trigger: true
      passed: [unit-tests]
    - get: kibosh-linux
      passed: [unit-tests]
    - get: loader-linux
      passed: [unit-tests]
    - get: bazaar-linux
      passed: [unit-tests]
    - get: delete-all-and-deregister
      passed: [build-delete-all-and-deregister]
    - get: cf-cli-binary
    - get: version
  - task: build-release
    config:
      inputs:
      - name: source-repo
      - name: kibosh-linux
      - name: loader-linux
      - name: bazaar-linux
      - name: delete-all-and-deregister
      - name: cf-cli-binary
      - name: version
      outputs:
      - name: output
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: cfplatformeng/tile-generator
          tag: "latest"
      run:
        path: bash
        args:
        - -exc
        - |
          set -ex

          export VERSION=`cat version/version`

          pushd source-repo/bosh/bosh-release

          bosh add-blob ../../../kibosh-linux/kibosh-*.linux kibosh.linux
          bosh add-blob ../../../loader-linux/loader-*.linux loader.linux
          bosh add-blob ../../../bazaar-linux/bazaar-*.linux bazaar.linux
          bosh add-blob ../../../delete-all-and-deregister/delete_all_and_deregister.linux delete_all_and_deregister.linux
          bosh add-blob ../../../cf-cli-binary/cf-cli.tgz cf-cli.tgz

          bosh create-release --name=kibosh --version=${VERSION} \
            --tarball=kibosh-release-${VERSION}.tgz --force

          popd
          cp source-repo/bosh/bosh-release/kibosh-release-${VERSION}.tgz output/
    on_failure: *slack_on_failure
  - put: kibosh-release
    params:
      file: output/kibosh-release-*.tgz

- name: upload-stemcell-and-release
  plan:
  - aggregate:
    - get: kibosh-ci-state
      #passed: [setup-infrastructure-lite]
    - get: lite-stemcell-fixed
    - get: cf-deployment-concourse-tasks-docker
    - get: docker-bosh-release
    - get: cf-cli
    - get: source-repo
      passed: [build-boshrelease]
      trigger: true
    - get: kibosh-release
      passed: [build-boshrelease]
    - get: spacebears-image
      params:
        save: true
  - task: do-upload
    image: cf-deployment-concourse-tasks-docker
    config:
      platform: linux
      inputs:
      - name: kibosh-ci-state
      - name: lite-stemcell-fixed
      - name: docker-bosh-release
      - name: cf-cli
      - name: source-repo
      - name: kibosh-release
      - name: spacebears-image
      run:
        path: bash
        args:
        - -exc
        - |
          pushd kibosh-ci-state/bbl-state
          set +x
          bbl print-env > /tmp/env.sh
          source /tmp/env.sh
          set -x
          popd

          bosh upload-release cf-cli/release.tgz
          bosh upload-release docker-bosh-release/docker-*.tgz
          bosh upload-stemcell lite-stemcell-fixed/stemcell.tgz
          bosh upload-release kibosh-release/kibosh-release*

          mkdir source-repo/bosh/example-chart-bosh-release/images
          mv spacebears-image/image source-repo/bosh/example-chart-bosh-release/images/spacebears.tgz

          pushd source-repo/bosh/example-chart-bosh-release
          ./deploy.sh
          popd
    on_failure: *slack_on_failure

- name: deploy
  plan:
  - aggregate:
    - get: kibosh-ci-state
    - get: cf-deployment-concourse-tasks-docker
    - get: source-repo
      passed: [upload-stemcell-and-release]
      trigger: true
    - get: kibosh-release
      passed: [upload-stemcell-and-release]
  - task: do-deploy
    image: cf-deployment-concourse-tasks-docker
    config:
      platform: linux
      inputs:
      - name: kibosh-ci-state
      - name: source-repo
      run:
        path: bash
        args:
        - -exc
        - |
          pushd kibosh-ci-state/bbl-state
          set +x
          bbl print-env > /tmp/env.sh
          source /tmp/env.sh
          set -x
          popd

          pushd source-repo

          echo '
          stemcell: bosh-google-kvm-ubuntu-trusty-go_agent
          kibosh-password: {{deployment_broker_password}}
          k8s-cluster-ca-cert: {{deployment_cluster_ca_cert}}
          k8s-cluster-server: {{deployment_k8s_cluster_server}}
          k8s-cluster-token: {{deployment_cluster_token}}
          registry-server: {{deployment_registry_server}}
          registry-user: {{deployment_registry_user}}
          registry-pass: {{deployment_registry_pass}}
          ' > values.yml

          yes | bosh -d kibosh deploy bosh/bosh-release/manifests/lite-manifest.yml --no-redact --vars-store=values.yml
          popd
    on_failure: *slack_on_failure

- name: push-image-errand
  plan:
  - aggregate:
    - get: kibosh-ci-state
    - get: cf-deployment-concourse-tasks-docker
    - get: source-repo
      passed: [deploy]
      trigger: true
    - get: kibosh-release
      passed: [deploy]
  - task: run-errand
    image: cf-deployment-concourse-tasks-docker
    config:
      platform: linux
      inputs:
      - name: kibosh-ci-state
      - name: source-repo
      run:
        path: bash
        args:
        - -exc
        - |
          pushd kibosh-ci-state/bbl-state
          set +x
          bbl print-env > /tmp/env.sh
          source /tmp/env.sh
          set -x
          popd

          pushd source-repo

          echo '
          stemcell: bosh-google-kvm-ubuntu-trusty-go_agent
          kibosh-password: {{deployment_broker_password}}
          k8s-cluster-ca-cert: {{deployment_cluster_ca_cert}}
          k8s-cluster-server: {{deployment_k8s_cluster_server}}
          k8s-cluster-token: {{deployment_cluster_token}}
          registry-server: {{deployment_registry_server}}
          registry-user: {{deployment_registry_user}}
          registry-pass: {{deployment_registry_pass}}
          ' > values.yml

          yes | bosh -d kibosh run-errand loader
          popd
    on_failure: *slack_on_failure

- name: save-tiller-image
  plan:
  - aggregate:
    - get: tiller-image
      params:
        save: true
  - task: do-save
    config:
      inputs:
      - name: tiller-image
      outputs:
      - name: out
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: cfplatformeng/tile-generator
      params:
        IMAGE_DIR: tiller-image
      run:
        path: bash
        args:
        - -exc
        - |
          pushd ${IMAGE_DIR}
          mkdir -p new-image out
          pushd new-image
          tar -xvf ../image
          popd

          cp new-image/manifest.json manifest.json.bk

          echo '
          import json

          with open("repository") as repo_file:
            repo = repo_file.read().strip()

          with open("tag") as tag_file:
            tag = tag_file.read().strip()

          with open("new-image/manifest.json", "r+") as file:
            manifest = json.load(file)
            repo_tags = ["{}:{}".format(repo, tag)]
            manifest[0]["RepoTags"] = repo_tags
            new_manifest = json.dumps(manifest)

            file.seek(0)
            print("\n", new_manifest, "\n")
            file.write(new_manifest)
          ' > fix_manifest.py

          python fix_manifest.py

          export IMAGE_FILE_NAME=tiller-$(cat tag).tgz
          tar -cvf ../out/${IMAGE_FILE_NAME} -C new-image $(ls new-image)
    on_failure: *slack_on_failure
  - put: tiller-image-fixed
    params:
      file: out/tiller-v*.tgz


- name: publish-release
  plan:
  - aggregate:
    - get: source-repo
      trigger: true
      passed: [push-image-errand]
    - get: kibosh-linux
    - get: kibosh-darwin
    - get: bazaarcli-linux
    - get: bazaarcli-mac
    - get: kibosh-release
      passed: [push-image-errand]
    - get: version
      passed: [build-boshrelease]
    - get: tiller-image
      passed: [save-tiller-image]
    - get: tiller-image-fixed
      passed: [save-tiller-image]
      params:
        save: true
  - task: publish-release
    config:
      inputs:
      - name: source-repo
      - name: kibosh-linux
      - name: kibosh-darwin
      - name: bazaarcli-linux
      - name: bazaarcli-mac
      - name: kibosh-release
      - name: version
      - name: tiller-image
      - name: tiller-image-fixed
      outputs:
      - name: output
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: cfplatformeng/tile-generator
          tag: "latest"
      run:
        path: bash
        args:
        - -exc
        - |
          export VERSION=`cat version/version`

          mv kibosh-linux/kibosh-*.linux output/
          mv kibosh-darwin/kibosh-*.darwin output/
          mv bazaarcli-linux/bazaarcli-*.linux output/
          mv bazaarcli-mac/bazaarcli-*.mac output/
          mv kibosh-release/kibosh*.tgz output/
          mv tiller-image-fixed/tiller-v*.tgz output/
    on_failure: *slack_on_failure
  - put: release-repo
    params:
      name: version/version
      tag: version/version
      globs:
      - output/kibosh*.*
      - output/bazaarcli*.*
      - output/tiller-*.tgz

- name: delete-deployment
  plan:
  - aggregate:
    - get: kibosh-ci-state
    - get: cf-deployment-concourse-tasks
    - get: kibosh-release
      passed: [push-image-errand]
    - get: source-repo
      passed: [push-image-errand]
      trigger: true
  - task: do-delete
    file: cf-deployment-concourse-tasks/bosh-delete-deployment/task.yml
    on_failure: *slack_on_failure
    params:
      DEPLOYMENT_NAME: kibosh
    input_mapping:
      bbl-state: kibosh-ci-state

- name: clean-up
  plan:
  - aggregate:
    - get: kibosh-ci-state
    - get: cf-deployment-concourse-tasks
    - get: kibosh-release
      passed: [delete-deployment]
    - get: source-repo
      passed: [delete-deployment]
      trigger: true
  - task: do-clean-up
    file: cf-deployment-concourse-tasks/bosh-cleanup/task.yml
    on_failure: *slack_on_failure
    params:
      CLEAN_ALL: true
    input_mapping:
      bbl-state: kibosh-ci-state

- name: bump-minor
  plan:
  - put: version
    params:
      bump: minor

- name: bump-major
  plan:
  - put: version
    params:
      bump: major
