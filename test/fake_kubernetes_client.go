// Code generated by counterfeiter. DO NOT EDIT.
package test

import (
	"sync"

	"k8s.io/client-go/discovery"
	"k8s.io/client-go/kubernetes"
	admissionregistrationv1alpha1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1alpha1"
	admissionregistrationv1beta1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1beta1"
	appsv1 "k8s.io/client-go/kubernetes/typed/apps/v1"
	appsv1beta1 "k8s.io/client-go/kubernetes/typed/apps/v1beta1"
	appsv1beta2 "k8s.io/client-go/kubernetes/typed/apps/v1beta2"
	authenticationv1 "k8s.io/client-go/kubernetes/typed/authentication/v1"
	authenticationv1beta1 "k8s.io/client-go/kubernetes/typed/authentication/v1beta1"
	authorizationv1 "k8s.io/client-go/kubernetes/typed/authorization/v1"
	authorizationv1beta1 "k8s.io/client-go/kubernetes/typed/authorization/v1beta1"
	autoscalingv1 "k8s.io/client-go/kubernetes/typed/autoscaling/v1"
	autoscalingv2beta1 "k8s.io/client-go/kubernetes/typed/autoscaling/v2beta1"
	batchv1 "k8s.io/client-go/kubernetes/typed/batch/v1"
	batchv1beta1 "k8s.io/client-go/kubernetes/typed/batch/v1beta1"
	batchv2alpha1 "k8s.io/client-go/kubernetes/typed/batch/v2alpha1"
	certificatesv1beta1 "k8s.io/client-go/kubernetes/typed/certificates/v1beta1"
	corev1 "k8s.io/client-go/kubernetes/typed/core/v1"
	eventsv1beta1 "k8s.io/client-go/kubernetes/typed/events/v1beta1"
	extensionsv1beta1 "k8s.io/client-go/kubernetes/typed/extensions/v1beta1"
	networkingv1 "k8s.io/client-go/kubernetes/typed/networking/v1"
	policyv1beta1 "k8s.io/client-go/kubernetes/typed/policy/v1beta1"
	rbacv1 "k8s.io/client-go/kubernetes/typed/rbac/v1"
	rbacv1alpha1 "k8s.io/client-go/kubernetes/typed/rbac/v1alpha1"
	rbacv1beta1 "k8s.io/client-go/kubernetes/typed/rbac/v1beta1"
	schedulingv1alpha1 "k8s.io/client-go/kubernetes/typed/scheduling/v1alpha1"
	settingsv1alpha1 "k8s.io/client-go/kubernetes/typed/settings/v1alpha1"
	storagev1 "k8s.io/client-go/kubernetes/typed/storage/v1"
	storagev1alpha1 "k8s.io/client-go/kubernetes/typed/storage/v1alpha1"
	storagev1beta1 "k8s.io/client-go/kubernetes/typed/storage/v1beta1"
)

type FakeK8sInterface struct {
	DiscoveryStub        func() discovery.DiscoveryInterface
	discoveryMutex       sync.RWMutex
	discoveryArgsForCall []struct{}
	discoveryReturns     struct {
		result1 discovery.DiscoveryInterface
	}
	discoveryReturnsOnCall map[int]struct {
		result1 discovery.DiscoveryInterface
	}
	AdmissionregistrationV1alpha1Stub        func() admissionregistrationv1alpha1.AdmissionregistrationV1alpha1Interface
	admissionregistrationV1alpha1Mutex       sync.RWMutex
	admissionregistrationV1alpha1ArgsForCall []struct{}
	admissionregistrationV1alpha1Returns     struct {
		result1 admissionregistrationv1alpha1.AdmissionregistrationV1alpha1Interface
	}
	admissionregistrationV1alpha1ReturnsOnCall map[int]struct {
		result1 admissionregistrationv1alpha1.AdmissionregistrationV1alpha1Interface
	}
	AdmissionregistrationV1beta1Stub        func() admissionregistrationv1beta1.AdmissionregistrationV1beta1Interface
	admissionregistrationV1beta1Mutex       sync.RWMutex
	admissionregistrationV1beta1ArgsForCall []struct{}
	admissionregistrationV1beta1Returns     struct {
		result1 admissionregistrationv1beta1.AdmissionregistrationV1beta1Interface
	}
	admissionregistrationV1beta1ReturnsOnCall map[int]struct {
		result1 admissionregistrationv1beta1.AdmissionregistrationV1beta1Interface
	}
	AdmissionregistrationStub        func() admissionregistrationv1beta1.AdmissionregistrationV1beta1Interface
	admissionregistrationMutex       sync.RWMutex
	admissionregistrationArgsForCall []struct{}
	admissionregistrationReturns     struct {
		result1 admissionregistrationv1beta1.AdmissionregistrationV1beta1Interface
	}
	admissionregistrationReturnsOnCall map[int]struct {
		result1 admissionregistrationv1beta1.AdmissionregistrationV1beta1Interface
	}
	AppsV1beta1Stub        func() appsv1beta1.AppsV1beta1Interface
	appsV1beta1Mutex       sync.RWMutex
	appsV1beta1ArgsForCall []struct{}
	appsV1beta1Returns     struct {
		result1 appsv1beta1.AppsV1beta1Interface
	}
	appsV1beta1ReturnsOnCall map[int]struct {
		result1 appsv1beta1.AppsV1beta1Interface
	}
	AppsV1beta2Stub        func() appsv1beta2.AppsV1beta2Interface
	appsV1beta2Mutex       sync.RWMutex
	appsV1beta2ArgsForCall []struct{}
	appsV1beta2Returns     struct {
		result1 appsv1beta2.AppsV1beta2Interface
	}
	appsV1beta2ReturnsOnCall map[int]struct {
		result1 appsv1beta2.AppsV1beta2Interface
	}
	AppsV1Stub        func() appsv1.AppsV1Interface
	appsV1Mutex       sync.RWMutex
	appsV1ArgsForCall []struct{}
	appsV1Returns     struct {
		result1 appsv1.AppsV1Interface
	}
	appsV1ReturnsOnCall map[int]struct {
		result1 appsv1.AppsV1Interface
	}
	AppsStub        func() appsv1.AppsV1Interface
	appsMutex       sync.RWMutex
	appsArgsForCall []struct{}
	appsReturns     struct {
		result1 appsv1.AppsV1Interface
	}
	appsReturnsOnCall map[int]struct {
		result1 appsv1.AppsV1Interface
	}
	AuthenticationV1Stub        func() authenticationv1.AuthenticationV1Interface
	authenticationV1Mutex       sync.RWMutex
	authenticationV1ArgsForCall []struct{}
	authenticationV1Returns     struct {
		result1 authenticationv1.AuthenticationV1Interface
	}
	authenticationV1ReturnsOnCall map[int]struct {
		result1 authenticationv1.AuthenticationV1Interface
	}
	AuthenticationStub        func() authenticationv1.AuthenticationV1Interface
	authenticationMutex       sync.RWMutex
	authenticationArgsForCall []struct{}
	authenticationReturns     struct {
		result1 authenticationv1.AuthenticationV1Interface
	}
	authenticationReturnsOnCall map[int]struct {
		result1 authenticationv1.AuthenticationV1Interface
	}
	AuthenticationV1beta1Stub        func() authenticationv1beta1.AuthenticationV1beta1Interface
	authenticationV1beta1Mutex       sync.RWMutex
	authenticationV1beta1ArgsForCall []struct{}
	authenticationV1beta1Returns     struct {
		result1 authenticationv1beta1.AuthenticationV1beta1Interface
	}
	authenticationV1beta1ReturnsOnCall map[int]struct {
		result1 authenticationv1beta1.AuthenticationV1beta1Interface
	}
	AuthorizationV1Stub        func() authorizationv1.AuthorizationV1Interface
	authorizationV1Mutex       sync.RWMutex
	authorizationV1ArgsForCall []struct{}
	authorizationV1Returns     struct {
		result1 authorizationv1.AuthorizationV1Interface
	}
	authorizationV1ReturnsOnCall map[int]struct {
		result1 authorizationv1.AuthorizationV1Interface
	}
	AuthorizationStub        func() authorizationv1.AuthorizationV1Interface
	authorizationMutex       sync.RWMutex
	authorizationArgsForCall []struct{}
	authorizationReturns     struct {
		result1 authorizationv1.AuthorizationV1Interface
	}
	authorizationReturnsOnCall map[int]struct {
		result1 authorizationv1.AuthorizationV1Interface
	}
	AuthorizationV1beta1Stub        func() authorizationv1beta1.AuthorizationV1beta1Interface
	authorizationV1beta1Mutex       sync.RWMutex
	authorizationV1beta1ArgsForCall []struct{}
	authorizationV1beta1Returns     struct {
		result1 authorizationv1beta1.AuthorizationV1beta1Interface
	}
	authorizationV1beta1ReturnsOnCall map[int]struct {
		result1 authorizationv1beta1.AuthorizationV1beta1Interface
	}
	AutoscalingV1Stub        func() autoscalingv1.AutoscalingV1Interface
	autoscalingV1Mutex       sync.RWMutex
	autoscalingV1ArgsForCall []struct{}
	autoscalingV1Returns     struct {
		result1 autoscalingv1.AutoscalingV1Interface
	}
	autoscalingV1ReturnsOnCall map[int]struct {
		result1 autoscalingv1.AutoscalingV1Interface
	}
	AutoscalingStub        func() autoscalingv1.AutoscalingV1Interface
	autoscalingMutex       sync.RWMutex
	autoscalingArgsForCall []struct{}
	autoscalingReturns     struct {
		result1 autoscalingv1.AutoscalingV1Interface
	}
	autoscalingReturnsOnCall map[int]struct {
		result1 autoscalingv1.AutoscalingV1Interface
	}
	AutoscalingV2beta1Stub        func() autoscalingv2beta1.AutoscalingV2beta1Interface
	autoscalingV2beta1Mutex       sync.RWMutex
	autoscalingV2beta1ArgsForCall []struct{}
	autoscalingV2beta1Returns     struct {
		result1 autoscalingv2beta1.AutoscalingV2beta1Interface
	}
	autoscalingV2beta1ReturnsOnCall map[int]struct {
		result1 autoscalingv2beta1.AutoscalingV2beta1Interface
	}
	BatchV1Stub        func() batchv1.BatchV1Interface
	batchV1Mutex       sync.RWMutex
	batchV1ArgsForCall []struct{}
	batchV1Returns     struct {
		result1 batchv1.BatchV1Interface
	}
	batchV1ReturnsOnCall map[int]struct {
		result1 batchv1.BatchV1Interface
	}
	BatchStub        func() batchv1.BatchV1Interface
	batchMutex       sync.RWMutex
	batchArgsForCall []struct{}
	batchReturns     struct {
		result1 batchv1.BatchV1Interface
	}
	batchReturnsOnCall map[int]struct {
		result1 batchv1.BatchV1Interface
	}
	BatchV1beta1Stub        func() batchv1beta1.BatchV1beta1Interface
	batchV1beta1Mutex       sync.RWMutex
	batchV1beta1ArgsForCall []struct{}
	batchV1beta1Returns     struct {
		result1 batchv1beta1.BatchV1beta1Interface
	}
	batchV1beta1ReturnsOnCall map[int]struct {
		result1 batchv1beta1.BatchV1beta1Interface
	}
	BatchV2alpha1Stub        func() batchv2alpha1.BatchV2alpha1Interface
	batchV2alpha1Mutex       sync.RWMutex
	batchV2alpha1ArgsForCall []struct{}
	batchV2alpha1Returns     struct {
		result1 batchv2alpha1.BatchV2alpha1Interface
	}
	batchV2alpha1ReturnsOnCall map[int]struct {
		result1 batchv2alpha1.BatchV2alpha1Interface
	}
	CertificatesV1beta1Stub        func() certificatesv1beta1.CertificatesV1beta1Interface
	certificatesV1beta1Mutex       sync.RWMutex
	certificatesV1beta1ArgsForCall []struct{}
	certificatesV1beta1Returns     struct {
		result1 certificatesv1beta1.CertificatesV1beta1Interface
	}
	certificatesV1beta1ReturnsOnCall map[int]struct {
		result1 certificatesv1beta1.CertificatesV1beta1Interface
	}
	CertificatesStub        func() certificatesv1beta1.CertificatesV1beta1Interface
	certificatesMutex       sync.RWMutex
	certificatesArgsForCall []struct{}
	certificatesReturns     struct {
		result1 certificatesv1beta1.CertificatesV1beta1Interface
	}
	certificatesReturnsOnCall map[int]struct {
		result1 certificatesv1beta1.CertificatesV1beta1Interface
	}
	CoreV1Stub        func() corev1.CoreV1Interface
	coreV1Mutex       sync.RWMutex
	coreV1ArgsForCall []struct{}
	coreV1Returns     struct {
		result1 corev1.CoreV1Interface
	}
	coreV1ReturnsOnCall map[int]struct {
		result1 corev1.CoreV1Interface
	}
	CoreStub        func() corev1.CoreV1Interface
	coreMutex       sync.RWMutex
	coreArgsForCall []struct{}
	coreReturns     struct {
		result1 corev1.CoreV1Interface
	}
	coreReturnsOnCall map[int]struct {
		result1 corev1.CoreV1Interface
	}
	EventsV1beta1Stub        func() eventsv1beta1.EventsV1beta1Interface
	eventsV1beta1Mutex       sync.RWMutex
	eventsV1beta1ArgsForCall []struct{}
	eventsV1beta1Returns     struct {
		result1 eventsv1beta1.EventsV1beta1Interface
	}
	eventsV1beta1ReturnsOnCall map[int]struct {
		result1 eventsv1beta1.EventsV1beta1Interface
	}
	EventsStub        func() eventsv1beta1.EventsV1beta1Interface
	eventsMutex       sync.RWMutex
	eventsArgsForCall []struct{}
	eventsReturns     struct {
		result1 eventsv1beta1.EventsV1beta1Interface
	}
	eventsReturnsOnCall map[int]struct {
		result1 eventsv1beta1.EventsV1beta1Interface
	}
	ExtensionsV1beta1Stub        func() extensionsv1beta1.ExtensionsV1beta1Interface
	extensionsV1beta1Mutex       sync.RWMutex
	extensionsV1beta1ArgsForCall []struct{}
	extensionsV1beta1Returns     struct {
		result1 extensionsv1beta1.ExtensionsV1beta1Interface
	}
	extensionsV1beta1ReturnsOnCall map[int]struct {
		result1 extensionsv1beta1.ExtensionsV1beta1Interface
	}
	ExtensionsStub        func() extensionsv1beta1.ExtensionsV1beta1Interface
	extensionsMutex       sync.RWMutex
	extensionsArgsForCall []struct{}
	extensionsReturns     struct {
		result1 extensionsv1beta1.ExtensionsV1beta1Interface
	}
	extensionsReturnsOnCall map[int]struct {
		result1 extensionsv1beta1.ExtensionsV1beta1Interface
	}
	NetworkingV1Stub        func() networkingv1.NetworkingV1Interface
	networkingV1Mutex       sync.RWMutex
	networkingV1ArgsForCall []struct{}
	networkingV1Returns     struct {
		result1 networkingv1.NetworkingV1Interface
	}
	networkingV1ReturnsOnCall map[int]struct {
		result1 networkingv1.NetworkingV1Interface
	}
	NetworkingStub        func() networkingv1.NetworkingV1Interface
	networkingMutex       sync.RWMutex
	networkingArgsForCall []struct{}
	networkingReturns     struct {
		result1 networkingv1.NetworkingV1Interface
	}
	networkingReturnsOnCall map[int]struct {
		result1 networkingv1.NetworkingV1Interface
	}
	PolicyV1beta1Stub        func() policyv1beta1.PolicyV1beta1Interface
	policyV1beta1Mutex       sync.RWMutex
	policyV1beta1ArgsForCall []struct{}
	policyV1beta1Returns     struct {
		result1 policyv1beta1.PolicyV1beta1Interface
	}
	policyV1beta1ReturnsOnCall map[int]struct {
		result1 policyv1beta1.PolicyV1beta1Interface
	}
	PolicyStub        func() policyv1beta1.PolicyV1beta1Interface
	policyMutex       sync.RWMutex
	policyArgsForCall []struct{}
	policyReturns     struct {
		result1 policyv1beta1.PolicyV1beta1Interface
	}
	policyReturnsOnCall map[int]struct {
		result1 policyv1beta1.PolicyV1beta1Interface
	}
	RbacV1Stub        func() rbacv1.RbacV1Interface
	rbacV1Mutex       sync.RWMutex
	rbacV1ArgsForCall []struct{}
	rbacV1Returns     struct {
		result1 rbacv1.RbacV1Interface
	}
	rbacV1ReturnsOnCall map[int]struct {
		result1 rbacv1.RbacV1Interface
	}
	RbacStub        func() rbacv1.RbacV1Interface
	rbacMutex       sync.RWMutex
	rbacArgsForCall []struct{}
	rbacReturns     struct {
		result1 rbacv1.RbacV1Interface
	}
	rbacReturnsOnCall map[int]struct {
		result1 rbacv1.RbacV1Interface
	}
	RbacV1beta1Stub        func() rbacv1beta1.RbacV1beta1Interface
	rbacV1beta1Mutex       sync.RWMutex
	rbacV1beta1ArgsForCall []struct{}
	rbacV1beta1Returns     struct {
		result1 rbacv1beta1.RbacV1beta1Interface
	}
	rbacV1beta1ReturnsOnCall map[int]struct {
		result1 rbacv1beta1.RbacV1beta1Interface
	}
	RbacV1alpha1Stub        func() rbacv1alpha1.RbacV1alpha1Interface
	rbacV1alpha1Mutex       sync.RWMutex
	rbacV1alpha1ArgsForCall []struct{}
	rbacV1alpha1Returns     struct {
		result1 rbacv1alpha1.RbacV1alpha1Interface
	}
	rbacV1alpha1ReturnsOnCall map[int]struct {
		result1 rbacv1alpha1.RbacV1alpha1Interface
	}
	SchedulingV1alpha1Stub        func() schedulingv1alpha1.SchedulingV1alpha1Interface
	schedulingV1alpha1Mutex       sync.RWMutex
	schedulingV1alpha1ArgsForCall []struct{}
	schedulingV1alpha1Returns     struct {
		result1 schedulingv1alpha1.SchedulingV1alpha1Interface
	}
	schedulingV1alpha1ReturnsOnCall map[int]struct {
		result1 schedulingv1alpha1.SchedulingV1alpha1Interface
	}
	SchedulingStub        func() schedulingv1alpha1.SchedulingV1alpha1Interface
	schedulingMutex       sync.RWMutex
	schedulingArgsForCall []struct{}
	schedulingReturns     struct {
		result1 schedulingv1alpha1.SchedulingV1alpha1Interface
	}
	schedulingReturnsOnCall map[int]struct {
		result1 schedulingv1alpha1.SchedulingV1alpha1Interface
	}
	SettingsV1alpha1Stub        func() settingsv1alpha1.SettingsV1alpha1Interface
	settingsV1alpha1Mutex       sync.RWMutex
	settingsV1alpha1ArgsForCall []struct{}
	settingsV1alpha1Returns     struct {
		result1 settingsv1alpha1.SettingsV1alpha1Interface
	}
	settingsV1alpha1ReturnsOnCall map[int]struct {
		result1 settingsv1alpha1.SettingsV1alpha1Interface
	}
	SettingsStub        func() settingsv1alpha1.SettingsV1alpha1Interface
	settingsMutex       sync.RWMutex
	settingsArgsForCall []struct{}
	settingsReturns     struct {
		result1 settingsv1alpha1.SettingsV1alpha1Interface
	}
	settingsReturnsOnCall map[int]struct {
		result1 settingsv1alpha1.SettingsV1alpha1Interface
	}
	StorageV1beta1Stub        func() storagev1beta1.StorageV1beta1Interface
	storageV1beta1Mutex       sync.RWMutex
	storageV1beta1ArgsForCall []struct{}
	storageV1beta1Returns     struct {
		result1 storagev1beta1.StorageV1beta1Interface
	}
	storageV1beta1ReturnsOnCall map[int]struct {
		result1 storagev1beta1.StorageV1beta1Interface
	}
	StorageV1Stub        func() storagev1.StorageV1Interface
	storageV1Mutex       sync.RWMutex
	storageV1ArgsForCall []struct{}
	storageV1Returns     struct {
		result1 storagev1.StorageV1Interface
	}
	storageV1ReturnsOnCall map[int]struct {
		result1 storagev1.StorageV1Interface
	}
	StorageStub        func() storagev1.StorageV1Interface
	storageMutex       sync.RWMutex
	storageArgsForCall []struct{}
	storageReturns     struct {
		result1 storagev1.StorageV1Interface
	}
	storageReturnsOnCall map[int]struct {
		result1 storagev1.StorageV1Interface
	}
	StorageV1alpha1Stub        func() storagev1alpha1.StorageV1alpha1Interface
	storageV1alpha1Mutex       sync.RWMutex
	storageV1alpha1ArgsForCall []struct{}
	storageV1alpha1Returns     struct {
		result1 storagev1alpha1.StorageV1alpha1Interface
	}
	storageV1alpha1ReturnsOnCall map[int]struct {
		result1 storagev1alpha1.StorageV1alpha1Interface
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeK8sInterface) Discovery() discovery.DiscoveryInterface {
	fake.discoveryMutex.Lock()
	ret, specificReturn := fake.discoveryReturnsOnCall[len(fake.discoveryArgsForCall)]
	fake.discoveryArgsForCall = append(fake.discoveryArgsForCall, struct{}{})
	fake.recordInvocation("Discovery", []interface{}{})
	fake.discoveryMutex.Unlock()
	if fake.DiscoveryStub != nil {
		return fake.DiscoveryStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.discoveryReturns.result1
}

func (fake *FakeK8sInterface) DiscoveryCallCount() int {
	fake.discoveryMutex.RLock()
	defer fake.discoveryMutex.RUnlock()
	return len(fake.discoveryArgsForCall)
}

func (fake *FakeK8sInterface) DiscoveryReturns(result1 discovery.DiscoveryInterface) {
	fake.DiscoveryStub = nil
	fake.discoveryReturns = struct {
		result1 discovery.DiscoveryInterface
	}{result1}
}

func (fake *FakeK8sInterface) DiscoveryReturnsOnCall(i int, result1 discovery.DiscoveryInterface) {
	fake.DiscoveryStub = nil
	if fake.discoveryReturnsOnCall == nil {
		fake.discoveryReturnsOnCall = make(map[int]struct {
			result1 discovery.DiscoveryInterface
		})
	}
	fake.discoveryReturnsOnCall[i] = struct {
		result1 discovery.DiscoveryInterface
	}{result1}
}

func (fake *FakeK8sInterface) AdmissionregistrationV1alpha1() admissionregistrationv1alpha1.AdmissionregistrationV1alpha1Interface {
	fake.admissionregistrationV1alpha1Mutex.Lock()
	ret, specificReturn := fake.admissionregistrationV1alpha1ReturnsOnCall[len(fake.admissionregistrationV1alpha1ArgsForCall)]
	fake.admissionregistrationV1alpha1ArgsForCall = append(fake.admissionregistrationV1alpha1ArgsForCall, struct{}{})
	fake.recordInvocation("AdmissionregistrationV1alpha1", []interface{}{})
	fake.admissionregistrationV1alpha1Mutex.Unlock()
	if fake.AdmissionregistrationV1alpha1Stub != nil {
		return fake.AdmissionregistrationV1alpha1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.admissionregistrationV1alpha1Returns.result1
}

func (fake *FakeK8sInterface) AdmissionregistrationV1alpha1CallCount() int {
	fake.admissionregistrationV1alpha1Mutex.RLock()
	defer fake.admissionregistrationV1alpha1Mutex.RUnlock()
	return len(fake.admissionregistrationV1alpha1ArgsForCall)
}

func (fake *FakeK8sInterface) AdmissionregistrationV1alpha1Returns(result1 admissionregistrationv1alpha1.AdmissionregistrationV1alpha1Interface) {
	fake.AdmissionregistrationV1alpha1Stub = nil
	fake.admissionregistrationV1alpha1Returns = struct {
		result1 admissionregistrationv1alpha1.AdmissionregistrationV1alpha1Interface
	}{result1}
}

func (fake *FakeK8sInterface) AdmissionregistrationV1alpha1ReturnsOnCall(i int, result1 admissionregistrationv1alpha1.AdmissionregistrationV1alpha1Interface) {
	fake.AdmissionregistrationV1alpha1Stub = nil
	if fake.admissionregistrationV1alpha1ReturnsOnCall == nil {
		fake.admissionregistrationV1alpha1ReturnsOnCall = make(map[int]struct {
			result1 admissionregistrationv1alpha1.AdmissionregistrationV1alpha1Interface
		})
	}
	fake.admissionregistrationV1alpha1ReturnsOnCall[i] = struct {
		result1 admissionregistrationv1alpha1.AdmissionregistrationV1alpha1Interface
	}{result1}
}

func (fake *FakeK8sInterface) AdmissionregistrationV1beta1() admissionregistrationv1beta1.AdmissionregistrationV1beta1Interface {
	fake.admissionregistrationV1beta1Mutex.Lock()
	ret, specificReturn := fake.admissionregistrationV1beta1ReturnsOnCall[len(fake.admissionregistrationV1beta1ArgsForCall)]
	fake.admissionregistrationV1beta1ArgsForCall = append(fake.admissionregistrationV1beta1ArgsForCall, struct{}{})
	fake.recordInvocation("AdmissionregistrationV1beta1", []interface{}{})
	fake.admissionregistrationV1beta1Mutex.Unlock()
	if fake.AdmissionregistrationV1beta1Stub != nil {
		return fake.AdmissionregistrationV1beta1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.admissionregistrationV1beta1Returns.result1
}

func (fake *FakeK8sInterface) AdmissionregistrationV1beta1CallCount() int {
	fake.admissionregistrationV1beta1Mutex.RLock()
	defer fake.admissionregistrationV1beta1Mutex.RUnlock()
	return len(fake.admissionregistrationV1beta1ArgsForCall)
}

func (fake *FakeK8sInterface) AdmissionregistrationV1beta1Returns(result1 admissionregistrationv1beta1.AdmissionregistrationV1beta1Interface) {
	fake.AdmissionregistrationV1beta1Stub = nil
	fake.admissionregistrationV1beta1Returns = struct {
		result1 admissionregistrationv1beta1.AdmissionregistrationV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) AdmissionregistrationV1beta1ReturnsOnCall(i int, result1 admissionregistrationv1beta1.AdmissionregistrationV1beta1Interface) {
	fake.AdmissionregistrationV1beta1Stub = nil
	if fake.admissionregistrationV1beta1ReturnsOnCall == nil {
		fake.admissionregistrationV1beta1ReturnsOnCall = make(map[int]struct {
			result1 admissionregistrationv1beta1.AdmissionregistrationV1beta1Interface
		})
	}
	fake.admissionregistrationV1beta1ReturnsOnCall[i] = struct {
		result1 admissionregistrationv1beta1.AdmissionregistrationV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) Admissionregistration() admissionregistrationv1beta1.AdmissionregistrationV1beta1Interface {
	fake.admissionregistrationMutex.Lock()
	ret, specificReturn := fake.admissionregistrationReturnsOnCall[len(fake.admissionregistrationArgsForCall)]
	fake.admissionregistrationArgsForCall = append(fake.admissionregistrationArgsForCall, struct{}{})
	fake.recordInvocation("Admissionregistration", []interface{}{})
	fake.admissionregistrationMutex.Unlock()
	if fake.AdmissionregistrationStub != nil {
		return fake.AdmissionregistrationStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.admissionregistrationReturns.result1
}

func (fake *FakeK8sInterface) AdmissionregistrationCallCount() int {
	fake.admissionregistrationMutex.RLock()
	defer fake.admissionregistrationMutex.RUnlock()
	return len(fake.admissionregistrationArgsForCall)
}

func (fake *FakeK8sInterface) AdmissionregistrationReturns(result1 admissionregistrationv1beta1.AdmissionregistrationV1beta1Interface) {
	fake.AdmissionregistrationStub = nil
	fake.admissionregistrationReturns = struct {
		result1 admissionregistrationv1beta1.AdmissionregistrationV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) AdmissionregistrationReturnsOnCall(i int, result1 admissionregistrationv1beta1.AdmissionregistrationV1beta1Interface) {
	fake.AdmissionregistrationStub = nil
	if fake.admissionregistrationReturnsOnCall == nil {
		fake.admissionregistrationReturnsOnCall = make(map[int]struct {
			result1 admissionregistrationv1beta1.AdmissionregistrationV1beta1Interface
		})
	}
	fake.admissionregistrationReturnsOnCall[i] = struct {
		result1 admissionregistrationv1beta1.AdmissionregistrationV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) AppsV1beta1() appsv1beta1.AppsV1beta1Interface {
	fake.appsV1beta1Mutex.Lock()
	ret, specificReturn := fake.appsV1beta1ReturnsOnCall[len(fake.appsV1beta1ArgsForCall)]
	fake.appsV1beta1ArgsForCall = append(fake.appsV1beta1ArgsForCall, struct{}{})
	fake.recordInvocation("AppsV1beta1", []interface{}{})
	fake.appsV1beta1Mutex.Unlock()
	if fake.AppsV1beta1Stub != nil {
		return fake.AppsV1beta1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.appsV1beta1Returns.result1
}

func (fake *FakeK8sInterface) AppsV1beta1CallCount() int {
	fake.appsV1beta1Mutex.RLock()
	defer fake.appsV1beta1Mutex.RUnlock()
	return len(fake.appsV1beta1ArgsForCall)
}

func (fake *FakeK8sInterface) AppsV1beta1Returns(result1 appsv1beta1.AppsV1beta1Interface) {
	fake.AppsV1beta1Stub = nil
	fake.appsV1beta1Returns = struct {
		result1 appsv1beta1.AppsV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) AppsV1beta1ReturnsOnCall(i int, result1 appsv1beta1.AppsV1beta1Interface) {
	fake.AppsV1beta1Stub = nil
	if fake.appsV1beta1ReturnsOnCall == nil {
		fake.appsV1beta1ReturnsOnCall = make(map[int]struct {
			result1 appsv1beta1.AppsV1beta1Interface
		})
	}
	fake.appsV1beta1ReturnsOnCall[i] = struct {
		result1 appsv1beta1.AppsV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) AppsV1beta2() appsv1beta2.AppsV1beta2Interface {
	fake.appsV1beta2Mutex.Lock()
	ret, specificReturn := fake.appsV1beta2ReturnsOnCall[len(fake.appsV1beta2ArgsForCall)]
	fake.appsV1beta2ArgsForCall = append(fake.appsV1beta2ArgsForCall, struct{}{})
	fake.recordInvocation("AppsV1beta2", []interface{}{})
	fake.appsV1beta2Mutex.Unlock()
	if fake.AppsV1beta2Stub != nil {
		return fake.AppsV1beta2Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.appsV1beta2Returns.result1
}

func (fake *FakeK8sInterface) AppsV1beta2CallCount() int {
	fake.appsV1beta2Mutex.RLock()
	defer fake.appsV1beta2Mutex.RUnlock()
	return len(fake.appsV1beta2ArgsForCall)
}

func (fake *FakeK8sInterface) AppsV1beta2Returns(result1 appsv1beta2.AppsV1beta2Interface) {
	fake.AppsV1beta2Stub = nil
	fake.appsV1beta2Returns = struct {
		result1 appsv1beta2.AppsV1beta2Interface
	}{result1}
}

func (fake *FakeK8sInterface) AppsV1beta2ReturnsOnCall(i int, result1 appsv1beta2.AppsV1beta2Interface) {
	fake.AppsV1beta2Stub = nil
	if fake.appsV1beta2ReturnsOnCall == nil {
		fake.appsV1beta2ReturnsOnCall = make(map[int]struct {
			result1 appsv1beta2.AppsV1beta2Interface
		})
	}
	fake.appsV1beta2ReturnsOnCall[i] = struct {
		result1 appsv1beta2.AppsV1beta2Interface
	}{result1}
}

func (fake *FakeK8sInterface) AppsV1() appsv1.AppsV1Interface {
	fake.appsV1Mutex.Lock()
	ret, specificReturn := fake.appsV1ReturnsOnCall[len(fake.appsV1ArgsForCall)]
	fake.appsV1ArgsForCall = append(fake.appsV1ArgsForCall, struct{}{})
	fake.recordInvocation("AppsV1", []interface{}{})
	fake.appsV1Mutex.Unlock()
	if fake.AppsV1Stub != nil {
		return fake.AppsV1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.appsV1Returns.result1
}

func (fake *FakeK8sInterface) AppsV1CallCount() int {
	fake.appsV1Mutex.RLock()
	defer fake.appsV1Mutex.RUnlock()
	return len(fake.appsV1ArgsForCall)
}

func (fake *FakeK8sInterface) AppsV1Returns(result1 appsv1.AppsV1Interface) {
	fake.AppsV1Stub = nil
	fake.appsV1Returns = struct {
		result1 appsv1.AppsV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) AppsV1ReturnsOnCall(i int, result1 appsv1.AppsV1Interface) {
	fake.AppsV1Stub = nil
	if fake.appsV1ReturnsOnCall == nil {
		fake.appsV1ReturnsOnCall = make(map[int]struct {
			result1 appsv1.AppsV1Interface
		})
	}
	fake.appsV1ReturnsOnCall[i] = struct {
		result1 appsv1.AppsV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) Apps() appsv1.AppsV1Interface {
	fake.appsMutex.Lock()
	ret, specificReturn := fake.appsReturnsOnCall[len(fake.appsArgsForCall)]
	fake.appsArgsForCall = append(fake.appsArgsForCall, struct{}{})
	fake.recordInvocation("Apps", []interface{}{})
	fake.appsMutex.Unlock()
	if fake.AppsStub != nil {
		return fake.AppsStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.appsReturns.result1
}

func (fake *FakeK8sInterface) AppsCallCount() int {
	fake.appsMutex.RLock()
	defer fake.appsMutex.RUnlock()
	return len(fake.appsArgsForCall)
}

func (fake *FakeK8sInterface) AppsReturns(result1 appsv1.AppsV1Interface) {
	fake.AppsStub = nil
	fake.appsReturns = struct {
		result1 appsv1.AppsV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) AppsReturnsOnCall(i int, result1 appsv1.AppsV1Interface) {
	fake.AppsStub = nil
	if fake.appsReturnsOnCall == nil {
		fake.appsReturnsOnCall = make(map[int]struct {
			result1 appsv1.AppsV1Interface
		})
	}
	fake.appsReturnsOnCall[i] = struct {
		result1 appsv1.AppsV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) AuthenticationV1() authenticationv1.AuthenticationV1Interface {
	fake.authenticationV1Mutex.Lock()
	ret, specificReturn := fake.authenticationV1ReturnsOnCall[len(fake.authenticationV1ArgsForCall)]
	fake.authenticationV1ArgsForCall = append(fake.authenticationV1ArgsForCall, struct{}{})
	fake.recordInvocation("AuthenticationV1", []interface{}{})
	fake.authenticationV1Mutex.Unlock()
	if fake.AuthenticationV1Stub != nil {
		return fake.AuthenticationV1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.authenticationV1Returns.result1
}

func (fake *FakeK8sInterface) AuthenticationV1CallCount() int {
	fake.authenticationV1Mutex.RLock()
	defer fake.authenticationV1Mutex.RUnlock()
	return len(fake.authenticationV1ArgsForCall)
}

func (fake *FakeK8sInterface) AuthenticationV1Returns(result1 authenticationv1.AuthenticationV1Interface) {
	fake.AuthenticationV1Stub = nil
	fake.authenticationV1Returns = struct {
		result1 authenticationv1.AuthenticationV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) AuthenticationV1ReturnsOnCall(i int, result1 authenticationv1.AuthenticationV1Interface) {
	fake.AuthenticationV1Stub = nil
	if fake.authenticationV1ReturnsOnCall == nil {
		fake.authenticationV1ReturnsOnCall = make(map[int]struct {
			result1 authenticationv1.AuthenticationV1Interface
		})
	}
	fake.authenticationV1ReturnsOnCall[i] = struct {
		result1 authenticationv1.AuthenticationV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) Authentication() authenticationv1.AuthenticationV1Interface {
	fake.authenticationMutex.Lock()
	ret, specificReturn := fake.authenticationReturnsOnCall[len(fake.authenticationArgsForCall)]
	fake.authenticationArgsForCall = append(fake.authenticationArgsForCall, struct{}{})
	fake.recordInvocation("Authentication", []interface{}{})
	fake.authenticationMutex.Unlock()
	if fake.AuthenticationStub != nil {
		return fake.AuthenticationStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.authenticationReturns.result1
}

func (fake *FakeK8sInterface) AuthenticationCallCount() int {
	fake.authenticationMutex.RLock()
	defer fake.authenticationMutex.RUnlock()
	return len(fake.authenticationArgsForCall)
}

func (fake *FakeK8sInterface) AuthenticationReturns(result1 authenticationv1.AuthenticationV1Interface) {
	fake.AuthenticationStub = nil
	fake.authenticationReturns = struct {
		result1 authenticationv1.AuthenticationV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) AuthenticationReturnsOnCall(i int, result1 authenticationv1.AuthenticationV1Interface) {
	fake.AuthenticationStub = nil
	if fake.authenticationReturnsOnCall == nil {
		fake.authenticationReturnsOnCall = make(map[int]struct {
			result1 authenticationv1.AuthenticationV1Interface
		})
	}
	fake.authenticationReturnsOnCall[i] = struct {
		result1 authenticationv1.AuthenticationV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) AuthenticationV1beta1() authenticationv1beta1.AuthenticationV1beta1Interface {
	fake.authenticationV1beta1Mutex.Lock()
	ret, specificReturn := fake.authenticationV1beta1ReturnsOnCall[len(fake.authenticationV1beta1ArgsForCall)]
	fake.authenticationV1beta1ArgsForCall = append(fake.authenticationV1beta1ArgsForCall, struct{}{})
	fake.recordInvocation("AuthenticationV1beta1", []interface{}{})
	fake.authenticationV1beta1Mutex.Unlock()
	if fake.AuthenticationV1beta1Stub != nil {
		return fake.AuthenticationV1beta1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.authenticationV1beta1Returns.result1
}

func (fake *FakeK8sInterface) AuthenticationV1beta1CallCount() int {
	fake.authenticationV1beta1Mutex.RLock()
	defer fake.authenticationV1beta1Mutex.RUnlock()
	return len(fake.authenticationV1beta1ArgsForCall)
}

func (fake *FakeK8sInterface) AuthenticationV1beta1Returns(result1 authenticationv1beta1.AuthenticationV1beta1Interface) {
	fake.AuthenticationV1beta1Stub = nil
	fake.authenticationV1beta1Returns = struct {
		result1 authenticationv1beta1.AuthenticationV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) AuthenticationV1beta1ReturnsOnCall(i int, result1 authenticationv1beta1.AuthenticationV1beta1Interface) {
	fake.AuthenticationV1beta1Stub = nil
	if fake.authenticationV1beta1ReturnsOnCall == nil {
		fake.authenticationV1beta1ReturnsOnCall = make(map[int]struct {
			result1 authenticationv1beta1.AuthenticationV1beta1Interface
		})
	}
	fake.authenticationV1beta1ReturnsOnCall[i] = struct {
		result1 authenticationv1beta1.AuthenticationV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) AuthorizationV1() authorizationv1.AuthorizationV1Interface {
	fake.authorizationV1Mutex.Lock()
	ret, specificReturn := fake.authorizationV1ReturnsOnCall[len(fake.authorizationV1ArgsForCall)]
	fake.authorizationV1ArgsForCall = append(fake.authorizationV1ArgsForCall, struct{}{})
	fake.recordInvocation("AuthorizationV1", []interface{}{})
	fake.authorizationV1Mutex.Unlock()
	if fake.AuthorizationV1Stub != nil {
		return fake.AuthorizationV1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.authorizationV1Returns.result1
}

func (fake *FakeK8sInterface) AuthorizationV1CallCount() int {
	fake.authorizationV1Mutex.RLock()
	defer fake.authorizationV1Mutex.RUnlock()
	return len(fake.authorizationV1ArgsForCall)
}

func (fake *FakeK8sInterface) AuthorizationV1Returns(result1 authorizationv1.AuthorizationV1Interface) {
	fake.AuthorizationV1Stub = nil
	fake.authorizationV1Returns = struct {
		result1 authorizationv1.AuthorizationV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) AuthorizationV1ReturnsOnCall(i int, result1 authorizationv1.AuthorizationV1Interface) {
	fake.AuthorizationV1Stub = nil
	if fake.authorizationV1ReturnsOnCall == nil {
		fake.authorizationV1ReturnsOnCall = make(map[int]struct {
			result1 authorizationv1.AuthorizationV1Interface
		})
	}
	fake.authorizationV1ReturnsOnCall[i] = struct {
		result1 authorizationv1.AuthorizationV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) Authorization() authorizationv1.AuthorizationV1Interface {
	fake.authorizationMutex.Lock()
	ret, specificReturn := fake.authorizationReturnsOnCall[len(fake.authorizationArgsForCall)]
	fake.authorizationArgsForCall = append(fake.authorizationArgsForCall, struct{}{})
	fake.recordInvocation("Authorization", []interface{}{})
	fake.authorizationMutex.Unlock()
	if fake.AuthorizationStub != nil {
		return fake.AuthorizationStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.authorizationReturns.result1
}

func (fake *FakeK8sInterface) AuthorizationCallCount() int {
	fake.authorizationMutex.RLock()
	defer fake.authorizationMutex.RUnlock()
	return len(fake.authorizationArgsForCall)
}

func (fake *FakeK8sInterface) AuthorizationReturns(result1 authorizationv1.AuthorizationV1Interface) {
	fake.AuthorizationStub = nil
	fake.authorizationReturns = struct {
		result1 authorizationv1.AuthorizationV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) AuthorizationReturnsOnCall(i int, result1 authorizationv1.AuthorizationV1Interface) {
	fake.AuthorizationStub = nil
	if fake.authorizationReturnsOnCall == nil {
		fake.authorizationReturnsOnCall = make(map[int]struct {
			result1 authorizationv1.AuthorizationV1Interface
		})
	}
	fake.authorizationReturnsOnCall[i] = struct {
		result1 authorizationv1.AuthorizationV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) AuthorizationV1beta1() authorizationv1beta1.AuthorizationV1beta1Interface {
	fake.authorizationV1beta1Mutex.Lock()
	ret, specificReturn := fake.authorizationV1beta1ReturnsOnCall[len(fake.authorizationV1beta1ArgsForCall)]
	fake.authorizationV1beta1ArgsForCall = append(fake.authorizationV1beta1ArgsForCall, struct{}{})
	fake.recordInvocation("AuthorizationV1beta1", []interface{}{})
	fake.authorizationV1beta1Mutex.Unlock()
	if fake.AuthorizationV1beta1Stub != nil {
		return fake.AuthorizationV1beta1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.authorizationV1beta1Returns.result1
}

func (fake *FakeK8sInterface) AuthorizationV1beta1CallCount() int {
	fake.authorizationV1beta1Mutex.RLock()
	defer fake.authorizationV1beta1Mutex.RUnlock()
	return len(fake.authorizationV1beta1ArgsForCall)
}

func (fake *FakeK8sInterface) AuthorizationV1beta1Returns(result1 authorizationv1beta1.AuthorizationV1beta1Interface) {
	fake.AuthorizationV1beta1Stub = nil
	fake.authorizationV1beta1Returns = struct {
		result1 authorizationv1beta1.AuthorizationV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) AuthorizationV1beta1ReturnsOnCall(i int, result1 authorizationv1beta1.AuthorizationV1beta1Interface) {
	fake.AuthorizationV1beta1Stub = nil
	if fake.authorizationV1beta1ReturnsOnCall == nil {
		fake.authorizationV1beta1ReturnsOnCall = make(map[int]struct {
			result1 authorizationv1beta1.AuthorizationV1beta1Interface
		})
	}
	fake.authorizationV1beta1ReturnsOnCall[i] = struct {
		result1 authorizationv1beta1.AuthorizationV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) AutoscalingV1() autoscalingv1.AutoscalingV1Interface {
	fake.autoscalingV1Mutex.Lock()
	ret, specificReturn := fake.autoscalingV1ReturnsOnCall[len(fake.autoscalingV1ArgsForCall)]
	fake.autoscalingV1ArgsForCall = append(fake.autoscalingV1ArgsForCall, struct{}{})
	fake.recordInvocation("AutoscalingV1", []interface{}{})
	fake.autoscalingV1Mutex.Unlock()
	if fake.AutoscalingV1Stub != nil {
		return fake.AutoscalingV1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.autoscalingV1Returns.result1
}

func (fake *FakeK8sInterface) AutoscalingV1CallCount() int {
	fake.autoscalingV1Mutex.RLock()
	defer fake.autoscalingV1Mutex.RUnlock()
	return len(fake.autoscalingV1ArgsForCall)
}

func (fake *FakeK8sInterface) AutoscalingV1Returns(result1 autoscalingv1.AutoscalingV1Interface) {
	fake.AutoscalingV1Stub = nil
	fake.autoscalingV1Returns = struct {
		result1 autoscalingv1.AutoscalingV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) AutoscalingV1ReturnsOnCall(i int, result1 autoscalingv1.AutoscalingV1Interface) {
	fake.AutoscalingV1Stub = nil
	if fake.autoscalingV1ReturnsOnCall == nil {
		fake.autoscalingV1ReturnsOnCall = make(map[int]struct {
			result1 autoscalingv1.AutoscalingV1Interface
		})
	}
	fake.autoscalingV1ReturnsOnCall[i] = struct {
		result1 autoscalingv1.AutoscalingV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) Autoscaling() autoscalingv1.AutoscalingV1Interface {
	fake.autoscalingMutex.Lock()
	ret, specificReturn := fake.autoscalingReturnsOnCall[len(fake.autoscalingArgsForCall)]
	fake.autoscalingArgsForCall = append(fake.autoscalingArgsForCall, struct{}{})
	fake.recordInvocation("Autoscaling", []interface{}{})
	fake.autoscalingMutex.Unlock()
	if fake.AutoscalingStub != nil {
		return fake.AutoscalingStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.autoscalingReturns.result1
}

func (fake *FakeK8sInterface) AutoscalingCallCount() int {
	fake.autoscalingMutex.RLock()
	defer fake.autoscalingMutex.RUnlock()
	return len(fake.autoscalingArgsForCall)
}

func (fake *FakeK8sInterface) AutoscalingReturns(result1 autoscalingv1.AutoscalingV1Interface) {
	fake.AutoscalingStub = nil
	fake.autoscalingReturns = struct {
		result1 autoscalingv1.AutoscalingV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) AutoscalingReturnsOnCall(i int, result1 autoscalingv1.AutoscalingV1Interface) {
	fake.AutoscalingStub = nil
	if fake.autoscalingReturnsOnCall == nil {
		fake.autoscalingReturnsOnCall = make(map[int]struct {
			result1 autoscalingv1.AutoscalingV1Interface
		})
	}
	fake.autoscalingReturnsOnCall[i] = struct {
		result1 autoscalingv1.AutoscalingV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) AutoscalingV2beta1() autoscalingv2beta1.AutoscalingV2beta1Interface {
	fake.autoscalingV2beta1Mutex.Lock()
	ret, specificReturn := fake.autoscalingV2beta1ReturnsOnCall[len(fake.autoscalingV2beta1ArgsForCall)]
	fake.autoscalingV2beta1ArgsForCall = append(fake.autoscalingV2beta1ArgsForCall, struct{}{})
	fake.recordInvocation("AutoscalingV2beta1", []interface{}{})
	fake.autoscalingV2beta1Mutex.Unlock()
	if fake.AutoscalingV2beta1Stub != nil {
		return fake.AutoscalingV2beta1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.autoscalingV2beta1Returns.result1
}

func (fake *FakeK8sInterface) AutoscalingV2beta1CallCount() int {
	fake.autoscalingV2beta1Mutex.RLock()
	defer fake.autoscalingV2beta1Mutex.RUnlock()
	return len(fake.autoscalingV2beta1ArgsForCall)
}

func (fake *FakeK8sInterface) AutoscalingV2beta1Returns(result1 autoscalingv2beta1.AutoscalingV2beta1Interface) {
	fake.AutoscalingV2beta1Stub = nil
	fake.autoscalingV2beta1Returns = struct {
		result1 autoscalingv2beta1.AutoscalingV2beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) AutoscalingV2beta1ReturnsOnCall(i int, result1 autoscalingv2beta1.AutoscalingV2beta1Interface) {
	fake.AutoscalingV2beta1Stub = nil
	if fake.autoscalingV2beta1ReturnsOnCall == nil {
		fake.autoscalingV2beta1ReturnsOnCall = make(map[int]struct {
			result1 autoscalingv2beta1.AutoscalingV2beta1Interface
		})
	}
	fake.autoscalingV2beta1ReturnsOnCall[i] = struct {
		result1 autoscalingv2beta1.AutoscalingV2beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) BatchV1() batchv1.BatchV1Interface {
	fake.batchV1Mutex.Lock()
	ret, specificReturn := fake.batchV1ReturnsOnCall[len(fake.batchV1ArgsForCall)]
	fake.batchV1ArgsForCall = append(fake.batchV1ArgsForCall, struct{}{})
	fake.recordInvocation("BatchV1", []interface{}{})
	fake.batchV1Mutex.Unlock()
	if fake.BatchV1Stub != nil {
		return fake.BatchV1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.batchV1Returns.result1
}

func (fake *FakeK8sInterface) BatchV1CallCount() int {
	fake.batchV1Mutex.RLock()
	defer fake.batchV1Mutex.RUnlock()
	return len(fake.batchV1ArgsForCall)
}

func (fake *FakeK8sInterface) BatchV1Returns(result1 batchv1.BatchV1Interface) {
	fake.BatchV1Stub = nil
	fake.batchV1Returns = struct {
		result1 batchv1.BatchV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) BatchV1ReturnsOnCall(i int, result1 batchv1.BatchV1Interface) {
	fake.BatchV1Stub = nil
	if fake.batchV1ReturnsOnCall == nil {
		fake.batchV1ReturnsOnCall = make(map[int]struct {
			result1 batchv1.BatchV1Interface
		})
	}
	fake.batchV1ReturnsOnCall[i] = struct {
		result1 batchv1.BatchV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) Batch() batchv1.BatchV1Interface {
	fake.batchMutex.Lock()
	ret, specificReturn := fake.batchReturnsOnCall[len(fake.batchArgsForCall)]
	fake.batchArgsForCall = append(fake.batchArgsForCall, struct{}{})
	fake.recordInvocation("Batch", []interface{}{})
	fake.batchMutex.Unlock()
	if fake.BatchStub != nil {
		return fake.BatchStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.batchReturns.result1
}

func (fake *FakeK8sInterface) BatchCallCount() int {
	fake.batchMutex.RLock()
	defer fake.batchMutex.RUnlock()
	return len(fake.batchArgsForCall)
}

func (fake *FakeK8sInterface) BatchReturns(result1 batchv1.BatchV1Interface) {
	fake.BatchStub = nil
	fake.batchReturns = struct {
		result1 batchv1.BatchV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) BatchReturnsOnCall(i int, result1 batchv1.BatchV1Interface) {
	fake.BatchStub = nil
	if fake.batchReturnsOnCall == nil {
		fake.batchReturnsOnCall = make(map[int]struct {
			result1 batchv1.BatchV1Interface
		})
	}
	fake.batchReturnsOnCall[i] = struct {
		result1 batchv1.BatchV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) BatchV1beta1() batchv1beta1.BatchV1beta1Interface {
	fake.batchV1beta1Mutex.Lock()
	ret, specificReturn := fake.batchV1beta1ReturnsOnCall[len(fake.batchV1beta1ArgsForCall)]
	fake.batchV1beta1ArgsForCall = append(fake.batchV1beta1ArgsForCall, struct{}{})
	fake.recordInvocation("BatchV1beta1", []interface{}{})
	fake.batchV1beta1Mutex.Unlock()
	if fake.BatchV1beta1Stub != nil {
		return fake.BatchV1beta1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.batchV1beta1Returns.result1
}

func (fake *FakeK8sInterface) BatchV1beta1CallCount() int {
	fake.batchV1beta1Mutex.RLock()
	defer fake.batchV1beta1Mutex.RUnlock()
	return len(fake.batchV1beta1ArgsForCall)
}

func (fake *FakeK8sInterface) BatchV1beta1Returns(result1 batchv1beta1.BatchV1beta1Interface) {
	fake.BatchV1beta1Stub = nil
	fake.batchV1beta1Returns = struct {
		result1 batchv1beta1.BatchV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) BatchV1beta1ReturnsOnCall(i int, result1 batchv1beta1.BatchV1beta1Interface) {
	fake.BatchV1beta1Stub = nil
	if fake.batchV1beta1ReturnsOnCall == nil {
		fake.batchV1beta1ReturnsOnCall = make(map[int]struct {
			result1 batchv1beta1.BatchV1beta1Interface
		})
	}
	fake.batchV1beta1ReturnsOnCall[i] = struct {
		result1 batchv1beta1.BatchV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) BatchV2alpha1() batchv2alpha1.BatchV2alpha1Interface {
	fake.batchV2alpha1Mutex.Lock()
	ret, specificReturn := fake.batchV2alpha1ReturnsOnCall[len(fake.batchV2alpha1ArgsForCall)]
	fake.batchV2alpha1ArgsForCall = append(fake.batchV2alpha1ArgsForCall, struct{}{})
	fake.recordInvocation("BatchV2alpha1", []interface{}{})
	fake.batchV2alpha1Mutex.Unlock()
	if fake.BatchV2alpha1Stub != nil {
		return fake.BatchV2alpha1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.batchV2alpha1Returns.result1
}

func (fake *FakeK8sInterface) BatchV2alpha1CallCount() int {
	fake.batchV2alpha1Mutex.RLock()
	defer fake.batchV2alpha1Mutex.RUnlock()
	return len(fake.batchV2alpha1ArgsForCall)
}

func (fake *FakeK8sInterface) BatchV2alpha1Returns(result1 batchv2alpha1.BatchV2alpha1Interface) {
	fake.BatchV2alpha1Stub = nil
	fake.batchV2alpha1Returns = struct {
		result1 batchv2alpha1.BatchV2alpha1Interface
	}{result1}
}

func (fake *FakeK8sInterface) BatchV2alpha1ReturnsOnCall(i int, result1 batchv2alpha1.BatchV2alpha1Interface) {
	fake.BatchV2alpha1Stub = nil
	if fake.batchV2alpha1ReturnsOnCall == nil {
		fake.batchV2alpha1ReturnsOnCall = make(map[int]struct {
			result1 batchv2alpha1.BatchV2alpha1Interface
		})
	}
	fake.batchV2alpha1ReturnsOnCall[i] = struct {
		result1 batchv2alpha1.BatchV2alpha1Interface
	}{result1}
}

func (fake *FakeK8sInterface) CertificatesV1beta1() certificatesv1beta1.CertificatesV1beta1Interface {
	fake.certificatesV1beta1Mutex.Lock()
	ret, specificReturn := fake.certificatesV1beta1ReturnsOnCall[len(fake.certificatesV1beta1ArgsForCall)]
	fake.certificatesV1beta1ArgsForCall = append(fake.certificatesV1beta1ArgsForCall, struct{}{})
	fake.recordInvocation("CertificatesV1beta1", []interface{}{})
	fake.certificatesV1beta1Mutex.Unlock()
	if fake.CertificatesV1beta1Stub != nil {
		return fake.CertificatesV1beta1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.certificatesV1beta1Returns.result1
}

func (fake *FakeK8sInterface) CertificatesV1beta1CallCount() int {
	fake.certificatesV1beta1Mutex.RLock()
	defer fake.certificatesV1beta1Mutex.RUnlock()
	return len(fake.certificatesV1beta1ArgsForCall)
}

func (fake *FakeK8sInterface) CertificatesV1beta1Returns(result1 certificatesv1beta1.CertificatesV1beta1Interface) {
	fake.CertificatesV1beta1Stub = nil
	fake.certificatesV1beta1Returns = struct {
		result1 certificatesv1beta1.CertificatesV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) CertificatesV1beta1ReturnsOnCall(i int, result1 certificatesv1beta1.CertificatesV1beta1Interface) {
	fake.CertificatesV1beta1Stub = nil
	if fake.certificatesV1beta1ReturnsOnCall == nil {
		fake.certificatesV1beta1ReturnsOnCall = make(map[int]struct {
			result1 certificatesv1beta1.CertificatesV1beta1Interface
		})
	}
	fake.certificatesV1beta1ReturnsOnCall[i] = struct {
		result1 certificatesv1beta1.CertificatesV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) Certificates() certificatesv1beta1.CertificatesV1beta1Interface {
	fake.certificatesMutex.Lock()
	ret, specificReturn := fake.certificatesReturnsOnCall[len(fake.certificatesArgsForCall)]
	fake.certificatesArgsForCall = append(fake.certificatesArgsForCall, struct{}{})
	fake.recordInvocation("Certificates", []interface{}{})
	fake.certificatesMutex.Unlock()
	if fake.CertificatesStub != nil {
		return fake.CertificatesStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.certificatesReturns.result1
}

func (fake *FakeK8sInterface) CertificatesCallCount() int {
	fake.certificatesMutex.RLock()
	defer fake.certificatesMutex.RUnlock()
	return len(fake.certificatesArgsForCall)
}

func (fake *FakeK8sInterface) CertificatesReturns(result1 certificatesv1beta1.CertificatesV1beta1Interface) {
	fake.CertificatesStub = nil
	fake.certificatesReturns = struct {
		result1 certificatesv1beta1.CertificatesV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) CertificatesReturnsOnCall(i int, result1 certificatesv1beta1.CertificatesV1beta1Interface) {
	fake.CertificatesStub = nil
	if fake.certificatesReturnsOnCall == nil {
		fake.certificatesReturnsOnCall = make(map[int]struct {
			result1 certificatesv1beta1.CertificatesV1beta1Interface
		})
	}
	fake.certificatesReturnsOnCall[i] = struct {
		result1 certificatesv1beta1.CertificatesV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) CoreV1() corev1.CoreV1Interface {
	fake.coreV1Mutex.Lock()
	ret, specificReturn := fake.coreV1ReturnsOnCall[len(fake.coreV1ArgsForCall)]
	fake.coreV1ArgsForCall = append(fake.coreV1ArgsForCall, struct{}{})
	fake.recordInvocation("CoreV1", []interface{}{})
	fake.coreV1Mutex.Unlock()
	if fake.CoreV1Stub != nil {
		return fake.CoreV1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.coreV1Returns.result1
}

func (fake *FakeK8sInterface) CoreV1CallCount() int {
	fake.coreV1Mutex.RLock()
	defer fake.coreV1Mutex.RUnlock()
	return len(fake.coreV1ArgsForCall)
}

func (fake *FakeK8sInterface) CoreV1Returns(result1 corev1.CoreV1Interface) {
	fake.CoreV1Stub = nil
	fake.coreV1Returns = struct {
		result1 corev1.CoreV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) CoreV1ReturnsOnCall(i int, result1 corev1.CoreV1Interface) {
	fake.CoreV1Stub = nil
	if fake.coreV1ReturnsOnCall == nil {
		fake.coreV1ReturnsOnCall = make(map[int]struct {
			result1 corev1.CoreV1Interface
		})
	}
	fake.coreV1ReturnsOnCall[i] = struct {
		result1 corev1.CoreV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) Core() corev1.CoreV1Interface {
	fake.coreMutex.Lock()
	ret, specificReturn := fake.coreReturnsOnCall[len(fake.coreArgsForCall)]
	fake.coreArgsForCall = append(fake.coreArgsForCall, struct{}{})
	fake.recordInvocation("Core", []interface{}{})
	fake.coreMutex.Unlock()
	if fake.CoreStub != nil {
		return fake.CoreStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.coreReturns.result1
}

func (fake *FakeK8sInterface) CoreCallCount() int {
	fake.coreMutex.RLock()
	defer fake.coreMutex.RUnlock()
	return len(fake.coreArgsForCall)
}

func (fake *FakeK8sInterface) CoreReturns(result1 corev1.CoreV1Interface) {
	fake.CoreStub = nil
	fake.coreReturns = struct {
		result1 corev1.CoreV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) CoreReturnsOnCall(i int, result1 corev1.CoreV1Interface) {
	fake.CoreStub = nil
	if fake.coreReturnsOnCall == nil {
		fake.coreReturnsOnCall = make(map[int]struct {
			result1 corev1.CoreV1Interface
		})
	}
	fake.coreReturnsOnCall[i] = struct {
		result1 corev1.CoreV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) EventsV1beta1() eventsv1beta1.EventsV1beta1Interface {
	fake.eventsV1beta1Mutex.Lock()
	ret, specificReturn := fake.eventsV1beta1ReturnsOnCall[len(fake.eventsV1beta1ArgsForCall)]
	fake.eventsV1beta1ArgsForCall = append(fake.eventsV1beta1ArgsForCall, struct{}{})
	fake.recordInvocation("EventsV1beta1", []interface{}{})
	fake.eventsV1beta1Mutex.Unlock()
	if fake.EventsV1beta1Stub != nil {
		return fake.EventsV1beta1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.eventsV1beta1Returns.result1
}

func (fake *FakeK8sInterface) EventsV1beta1CallCount() int {
	fake.eventsV1beta1Mutex.RLock()
	defer fake.eventsV1beta1Mutex.RUnlock()
	return len(fake.eventsV1beta1ArgsForCall)
}

func (fake *FakeK8sInterface) EventsV1beta1Returns(result1 eventsv1beta1.EventsV1beta1Interface) {
	fake.EventsV1beta1Stub = nil
	fake.eventsV1beta1Returns = struct {
		result1 eventsv1beta1.EventsV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) EventsV1beta1ReturnsOnCall(i int, result1 eventsv1beta1.EventsV1beta1Interface) {
	fake.EventsV1beta1Stub = nil
	if fake.eventsV1beta1ReturnsOnCall == nil {
		fake.eventsV1beta1ReturnsOnCall = make(map[int]struct {
			result1 eventsv1beta1.EventsV1beta1Interface
		})
	}
	fake.eventsV1beta1ReturnsOnCall[i] = struct {
		result1 eventsv1beta1.EventsV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) Events() eventsv1beta1.EventsV1beta1Interface {
	fake.eventsMutex.Lock()
	ret, specificReturn := fake.eventsReturnsOnCall[len(fake.eventsArgsForCall)]
	fake.eventsArgsForCall = append(fake.eventsArgsForCall, struct{}{})
	fake.recordInvocation("Events", []interface{}{})
	fake.eventsMutex.Unlock()
	if fake.EventsStub != nil {
		return fake.EventsStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.eventsReturns.result1
}

func (fake *FakeK8sInterface) EventsCallCount() int {
	fake.eventsMutex.RLock()
	defer fake.eventsMutex.RUnlock()
	return len(fake.eventsArgsForCall)
}

func (fake *FakeK8sInterface) EventsReturns(result1 eventsv1beta1.EventsV1beta1Interface) {
	fake.EventsStub = nil
	fake.eventsReturns = struct {
		result1 eventsv1beta1.EventsV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) EventsReturnsOnCall(i int, result1 eventsv1beta1.EventsV1beta1Interface) {
	fake.EventsStub = nil
	if fake.eventsReturnsOnCall == nil {
		fake.eventsReturnsOnCall = make(map[int]struct {
			result1 eventsv1beta1.EventsV1beta1Interface
		})
	}
	fake.eventsReturnsOnCall[i] = struct {
		result1 eventsv1beta1.EventsV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) ExtensionsV1beta1() extensionsv1beta1.ExtensionsV1beta1Interface {
	fake.extensionsV1beta1Mutex.Lock()
	ret, specificReturn := fake.extensionsV1beta1ReturnsOnCall[len(fake.extensionsV1beta1ArgsForCall)]
	fake.extensionsV1beta1ArgsForCall = append(fake.extensionsV1beta1ArgsForCall, struct{}{})
	fake.recordInvocation("ExtensionsV1beta1", []interface{}{})
	fake.extensionsV1beta1Mutex.Unlock()
	if fake.ExtensionsV1beta1Stub != nil {
		return fake.ExtensionsV1beta1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.extensionsV1beta1Returns.result1
}

func (fake *FakeK8sInterface) ExtensionsV1beta1CallCount() int {
	fake.extensionsV1beta1Mutex.RLock()
	defer fake.extensionsV1beta1Mutex.RUnlock()
	return len(fake.extensionsV1beta1ArgsForCall)
}

func (fake *FakeK8sInterface) ExtensionsV1beta1Returns(result1 extensionsv1beta1.ExtensionsV1beta1Interface) {
	fake.ExtensionsV1beta1Stub = nil
	fake.extensionsV1beta1Returns = struct {
		result1 extensionsv1beta1.ExtensionsV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) ExtensionsV1beta1ReturnsOnCall(i int, result1 extensionsv1beta1.ExtensionsV1beta1Interface) {
	fake.ExtensionsV1beta1Stub = nil
	if fake.extensionsV1beta1ReturnsOnCall == nil {
		fake.extensionsV1beta1ReturnsOnCall = make(map[int]struct {
			result1 extensionsv1beta1.ExtensionsV1beta1Interface
		})
	}
	fake.extensionsV1beta1ReturnsOnCall[i] = struct {
		result1 extensionsv1beta1.ExtensionsV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) Extensions() extensionsv1beta1.ExtensionsV1beta1Interface {
	fake.extensionsMutex.Lock()
	ret, specificReturn := fake.extensionsReturnsOnCall[len(fake.extensionsArgsForCall)]
	fake.extensionsArgsForCall = append(fake.extensionsArgsForCall, struct{}{})
	fake.recordInvocation("Extensions", []interface{}{})
	fake.extensionsMutex.Unlock()
	if fake.ExtensionsStub != nil {
		return fake.ExtensionsStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.extensionsReturns.result1
}

func (fake *FakeK8sInterface) ExtensionsCallCount() int {
	fake.extensionsMutex.RLock()
	defer fake.extensionsMutex.RUnlock()
	return len(fake.extensionsArgsForCall)
}

func (fake *FakeK8sInterface) ExtensionsReturns(result1 extensionsv1beta1.ExtensionsV1beta1Interface) {
	fake.ExtensionsStub = nil
	fake.extensionsReturns = struct {
		result1 extensionsv1beta1.ExtensionsV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) ExtensionsReturnsOnCall(i int, result1 extensionsv1beta1.ExtensionsV1beta1Interface) {
	fake.ExtensionsStub = nil
	if fake.extensionsReturnsOnCall == nil {
		fake.extensionsReturnsOnCall = make(map[int]struct {
			result1 extensionsv1beta1.ExtensionsV1beta1Interface
		})
	}
	fake.extensionsReturnsOnCall[i] = struct {
		result1 extensionsv1beta1.ExtensionsV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) NetworkingV1() networkingv1.NetworkingV1Interface {
	fake.networkingV1Mutex.Lock()
	ret, specificReturn := fake.networkingV1ReturnsOnCall[len(fake.networkingV1ArgsForCall)]
	fake.networkingV1ArgsForCall = append(fake.networkingV1ArgsForCall, struct{}{})
	fake.recordInvocation("NetworkingV1", []interface{}{})
	fake.networkingV1Mutex.Unlock()
	if fake.NetworkingV1Stub != nil {
		return fake.NetworkingV1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.networkingV1Returns.result1
}

func (fake *FakeK8sInterface) NetworkingV1CallCount() int {
	fake.networkingV1Mutex.RLock()
	defer fake.networkingV1Mutex.RUnlock()
	return len(fake.networkingV1ArgsForCall)
}

func (fake *FakeK8sInterface) NetworkingV1Returns(result1 networkingv1.NetworkingV1Interface) {
	fake.NetworkingV1Stub = nil
	fake.networkingV1Returns = struct {
		result1 networkingv1.NetworkingV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) NetworkingV1ReturnsOnCall(i int, result1 networkingv1.NetworkingV1Interface) {
	fake.NetworkingV1Stub = nil
	if fake.networkingV1ReturnsOnCall == nil {
		fake.networkingV1ReturnsOnCall = make(map[int]struct {
			result1 networkingv1.NetworkingV1Interface
		})
	}
	fake.networkingV1ReturnsOnCall[i] = struct {
		result1 networkingv1.NetworkingV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) Networking() networkingv1.NetworkingV1Interface {
	fake.networkingMutex.Lock()
	ret, specificReturn := fake.networkingReturnsOnCall[len(fake.networkingArgsForCall)]
	fake.networkingArgsForCall = append(fake.networkingArgsForCall, struct{}{})
	fake.recordInvocation("Networking", []interface{}{})
	fake.networkingMutex.Unlock()
	if fake.NetworkingStub != nil {
		return fake.NetworkingStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.networkingReturns.result1
}

func (fake *FakeK8sInterface) NetworkingCallCount() int {
	fake.networkingMutex.RLock()
	defer fake.networkingMutex.RUnlock()
	return len(fake.networkingArgsForCall)
}

func (fake *FakeK8sInterface) NetworkingReturns(result1 networkingv1.NetworkingV1Interface) {
	fake.NetworkingStub = nil
	fake.networkingReturns = struct {
		result1 networkingv1.NetworkingV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) NetworkingReturnsOnCall(i int, result1 networkingv1.NetworkingV1Interface) {
	fake.NetworkingStub = nil
	if fake.networkingReturnsOnCall == nil {
		fake.networkingReturnsOnCall = make(map[int]struct {
			result1 networkingv1.NetworkingV1Interface
		})
	}
	fake.networkingReturnsOnCall[i] = struct {
		result1 networkingv1.NetworkingV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) PolicyV1beta1() policyv1beta1.PolicyV1beta1Interface {
	fake.policyV1beta1Mutex.Lock()
	ret, specificReturn := fake.policyV1beta1ReturnsOnCall[len(fake.policyV1beta1ArgsForCall)]
	fake.policyV1beta1ArgsForCall = append(fake.policyV1beta1ArgsForCall, struct{}{})
	fake.recordInvocation("PolicyV1beta1", []interface{}{})
	fake.policyV1beta1Mutex.Unlock()
	if fake.PolicyV1beta1Stub != nil {
		return fake.PolicyV1beta1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.policyV1beta1Returns.result1
}

func (fake *FakeK8sInterface) PolicyV1beta1CallCount() int {
	fake.policyV1beta1Mutex.RLock()
	defer fake.policyV1beta1Mutex.RUnlock()
	return len(fake.policyV1beta1ArgsForCall)
}

func (fake *FakeK8sInterface) PolicyV1beta1Returns(result1 policyv1beta1.PolicyV1beta1Interface) {
	fake.PolicyV1beta1Stub = nil
	fake.policyV1beta1Returns = struct {
		result1 policyv1beta1.PolicyV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) PolicyV1beta1ReturnsOnCall(i int, result1 policyv1beta1.PolicyV1beta1Interface) {
	fake.PolicyV1beta1Stub = nil
	if fake.policyV1beta1ReturnsOnCall == nil {
		fake.policyV1beta1ReturnsOnCall = make(map[int]struct {
			result1 policyv1beta1.PolicyV1beta1Interface
		})
	}
	fake.policyV1beta1ReturnsOnCall[i] = struct {
		result1 policyv1beta1.PolicyV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) Policy() policyv1beta1.PolicyV1beta1Interface {
	fake.policyMutex.Lock()
	ret, specificReturn := fake.policyReturnsOnCall[len(fake.policyArgsForCall)]
	fake.policyArgsForCall = append(fake.policyArgsForCall, struct{}{})
	fake.recordInvocation("Policy", []interface{}{})
	fake.policyMutex.Unlock()
	if fake.PolicyStub != nil {
		return fake.PolicyStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.policyReturns.result1
}

func (fake *FakeK8sInterface) PolicyCallCount() int {
	fake.policyMutex.RLock()
	defer fake.policyMutex.RUnlock()
	return len(fake.policyArgsForCall)
}

func (fake *FakeK8sInterface) PolicyReturns(result1 policyv1beta1.PolicyV1beta1Interface) {
	fake.PolicyStub = nil
	fake.policyReturns = struct {
		result1 policyv1beta1.PolicyV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) PolicyReturnsOnCall(i int, result1 policyv1beta1.PolicyV1beta1Interface) {
	fake.PolicyStub = nil
	if fake.policyReturnsOnCall == nil {
		fake.policyReturnsOnCall = make(map[int]struct {
			result1 policyv1beta1.PolicyV1beta1Interface
		})
	}
	fake.policyReturnsOnCall[i] = struct {
		result1 policyv1beta1.PolicyV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) RbacV1() rbacv1.RbacV1Interface {
	fake.rbacV1Mutex.Lock()
	ret, specificReturn := fake.rbacV1ReturnsOnCall[len(fake.rbacV1ArgsForCall)]
	fake.rbacV1ArgsForCall = append(fake.rbacV1ArgsForCall, struct{}{})
	fake.recordInvocation("RbacV1", []interface{}{})
	fake.rbacV1Mutex.Unlock()
	if fake.RbacV1Stub != nil {
		return fake.RbacV1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.rbacV1Returns.result1
}

func (fake *FakeK8sInterface) RbacV1CallCount() int {
	fake.rbacV1Mutex.RLock()
	defer fake.rbacV1Mutex.RUnlock()
	return len(fake.rbacV1ArgsForCall)
}

func (fake *FakeK8sInterface) RbacV1Returns(result1 rbacv1.RbacV1Interface) {
	fake.RbacV1Stub = nil
	fake.rbacV1Returns = struct {
		result1 rbacv1.RbacV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) RbacV1ReturnsOnCall(i int, result1 rbacv1.RbacV1Interface) {
	fake.RbacV1Stub = nil
	if fake.rbacV1ReturnsOnCall == nil {
		fake.rbacV1ReturnsOnCall = make(map[int]struct {
			result1 rbacv1.RbacV1Interface
		})
	}
	fake.rbacV1ReturnsOnCall[i] = struct {
		result1 rbacv1.RbacV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) Rbac() rbacv1.RbacV1Interface {
	fake.rbacMutex.Lock()
	ret, specificReturn := fake.rbacReturnsOnCall[len(fake.rbacArgsForCall)]
	fake.rbacArgsForCall = append(fake.rbacArgsForCall, struct{}{})
	fake.recordInvocation("Rbac", []interface{}{})
	fake.rbacMutex.Unlock()
	if fake.RbacStub != nil {
		return fake.RbacStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.rbacReturns.result1
}

func (fake *FakeK8sInterface) RbacCallCount() int {
	fake.rbacMutex.RLock()
	defer fake.rbacMutex.RUnlock()
	return len(fake.rbacArgsForCall)
}

func (fake *FakeK8sInterface) RbacReturns(result1 rbacv1.RbacV1Interface) {
	fake.RbacStub = nil
	fake.rbacReturns = struct {
		result1 rbacv1.RbacV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) RbacReturnsOnCall(i int, result1 rbacv1.RbacV1Interface) {
	fake.RbacStub = nil
	if fake.rbacReturnsOnCall == nil {
		fake.rbacReturnsOnCall = make(map[int]struct {
			result1 rbacv1.RbacV1Interface
		})
	}
	fake.rbacReturnsOnCall[i] = struct {
		result1 rbacv1.RbacV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) RbacV1beta1() rbacv1beta1.RbacV1beta1Interface {
	fake.rbacV1beta1Mutex.Lock()
	ret, specificReturn := fake.rbacV1beta1ReturnsOnCall[len(fake.rbacV1beta1ArgsForCall)]
	fake.rbacV1beta1ArgsForCall = append(fake.rbacV1beta1ArgsForCall, struct{}{})
	fake.recordInvocation("RbacV1beta1", []interface{}{})
	fake.rbacV1beta1Mutex.Unlock()
	if fake.RbacV1beta1Stub != nil {
		return fake.RbacV1beta1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.rbacV1beta1Returns.result1
}

func (fake *FakeK8sInterface) RbacV1beta1CallCount() int {
	fake.rbacV1beta1Mutex.RLock()
	defer fake.rbacV1beta1Mutex.RUnlock()
	return len(fake.rbacV1beta1ArgsForCall)
}

func (fake *FakeK8sInterface) RbacV1beta1Returns(result1 rbacv1beta1.RbacV1beta1Interface) {
	fake.RbacV1beta1Stub = nil
	fake.rbacV1beta1Returns = struct {
		result1 rbacv1beta1.RbacV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) RbacV1beta1ReturnsOnCall(i int, result1 rbacv1beta1.RbacV1beta1Interface) {
	fake.RbacV1beta1Stub = nil
	if fake.rbacV1beta1ReturnsOnCall == nil {
		fake.rbacV1beta1ReturnsOnCall = make(map[int]struct {
			result1 rbacv1beta1.RbacV1beta1Interface
		})
	}
	fake.rbacV1beta1ReturnsOnCall[i] = struct {
		result1 rbacv1beta1.RbacV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) RbacV1alpha1() rbacv1alpha1.RbacV1alpha1Interface {
	fake.rbacV1alpha1Mutex.Lock()
	ret, specificReturn := fake.rbacV1alpha1ReturnsOnCall[len(fake.rbacV1alpha1ArgsForCall)]
	fake.rbacV1alpha1ArgsForCall = append(fake.rbacV1alpha1ArgsForCall, struct{}{})
	fake.recordInvocation("RbacV1alpha1", []interface{}{})
	fake.rbacV1alpha1Mutex.Unlock()
	if fake.RbacV1alpha1Stub != nil {
		return fake.RbacV1alpha1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.rbacV1alpha1Returns.result1
}

func (fake *FakeK8sInterface) RbacV1alpha1CallCount() int {
	fake.rbacV1alpha1Mutex.RLock()
	defer fake.rbacV1alpha1Mutex.RUnlock()
	return len(fake.rbacV1alpha1ArgsForCall)
}

func (fake *FakeK8sInterface) RbacV1alpha1Returns(result1 rbacv1alpha1.RbacV1alpha1Interface) {
	fake.RbacV1alpha1Stub = nil
	fake.rbacV1alpha1Returns = struct {
		result1 rbacv1alpha1.RbacV1alpha1Interface
	}{result1}
}

func (fake *FakeK8sInterface) RbacV1alpha1ReturnsOnCall(i int, result1 rbacv1alpha1.RbacV1alpha1Interface) {
	fake.RbacV1alpha1Stub = nil
	if fake.rbacV1alpha1ReturnsOnCall == nil {
		fake.rbacV1alpha1ReturnsOnCall = make(map[int]struct {
			result1 rbacv1alpha1.RbacV1alpha1Interface
		})
	}
	fake.rbacV1alpha1ReturnsOnCall[i] = struct {
		result1 rbacv1alpha1.RbacV1alpha1Interface
	}{result1}
}

func (fake *FakeK8sInterface) SchedulingV1alpha1() schedulingv1alpha1.SchedulingV1alpha1Interface {
	fake.schedulingV1alpha1Mutex.Lock()
	ret, specificReturn := fake.schedulingV1alpha1ReturnsOnCall[len(fake.schedulingV1alpha1ArgsForCall)]
	fake.schedulingV1alpha1ArgsForCall = append(fake.schedulingV1alpha1ArgsForCall, struct{}{})
	fake.recordInvocation("SchedulingV1alpha1", []interface{}{})
	fake.schedulingV1alpha1Mutex.Unlock()
	if fake.SchedulingV1alpha1Stub != nil {
		return fake.SchedulingV1alpha1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.schedulingV1alpha1Returns.result1
}

func (fake *FakeK8sInterface) SchedulingV1alpha1CallCount() int {
	fake.schedulingV1alpha1Mutex.RLock()
	defer fake.schedulingV1alpha1Mutex.RUnlock()
	return len(fake.schedulingV1alpha1ArgsForCall)
}

func (fake *FakeK8sInterface) SchedulingV1alpha1Returns(result1 schedulingv1alpha1.SchedulingV1alpha1Interface) {
	fake.SchedulingV1alpha1Stub = nil
	fake.schedulingV1alpha1Returns = struct {
		result1 schedulingv1alpha1.SchedulingV1alpha1Interface
	}{result1}
}

func (fake *FakeK8sInterface) SchedulingV1alpha1ReturnsOnCall(i int, result1 schedulingv1alpha1.SchedulingV1alpha1Interface) {
	fake.SchedulingV1alpha1Stub = nil
	if fake.schedulingV1alpha1ReturnsOnCall == nil {
		fake.schedulingV1alpha1ReturnsOnCall = make(map[int]struct {
			result1 schedulingv1alpha1.SchedulingV1alpha1Interface
		})
	}
	fake.schedulingV1alpha1ReturnsOnCall[i] = struct {
		result1 schedulingv1alpha1.SchedulingV1alpha1Interface
	}{result1}
}

func (fake *FakeK8sInterface) Scheduling() schedulingv1alpha1.SchedulingV1alpha1Interface {
	fake.schedulingMutex.Lock()
	ret, specificReturn := fake.schedulingReturnsOnCall[len(fake.schedulingArgsForCall)]
	fake.schedulingArgsForCall = append(fake.schedulingArgsForCall, struct{}{})
	fake.recordInvocation("Scheduling", []interface{}{})
	fake.schedulingMutex.Unlock()
	if fake.SchedulingStub != nil {
		return fake.SchedulingStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.schedulingReturns.result1
}

func (fake *FakeK8sInterface) SchedulingCallCount() int {
	fake.schedulingMutex.RLock()
	defer fake.schedulingMutex.RUnlock()
	return len(fake.schedulingArgsForCall)
}

func (fake *FakeK8sInterface) SchedulingReturns(result1 schedulingv1alpha1.SchedulingV1alpha1Interface) {
	fake.SchedulingStub = nil
	fake.schedulingReturns = struct {
		result1 schedulingv1alpha1.SchedulingV1alpha1Interface
	}{result1}
}

func (fake *FakeK8sInterface) SchedulingReturnsOnCall(i int, result1 schedulingv1alpha1.SchedulingV1alpha1Interface) {
	fake.SchedulingStub = nil
	if fake.schedulingReturnsOnCall == nil {
		fake.schedulingReturnsOnCall = make(map[int]struct {
			result1 schedulingv1alpha1.SchedulingV1alpha1Interface
		})
	}
	fake.schedulingReturnsOnCall[i] = struct {
		result1 schedulingv1alpha1.SchedulingV1alpha1Interface
	}{result1}
}

func (fake *FakeK8sInterface) SettingsV1alpha1() settingsv1alpha1.SettingsV1alpha1Interface {
	fake.settingsV1alpha1Mutex.Lock()
	ret, specificReturn := fake.settingsV1alpha1ReturnsOnCall[len(fake.settingsV1alpha1ArgsForCall)]
	fake.settingsV1alpha1ArgsForCall = append(fake.settingsV1alpha1ArgsForCall, struct{}{})
	fake.recordInvocation("SettingsV1alpha1", []interface{}{})
	fake.settingsV1alpha1Mutex.Unlock()
	if fake.SettingsV1alpha1Stub != nil {
		return fake.SettingsV1alpha1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.settingsV1alpha1Returns.result1
}

func (fake *FakeK8sInterface) SettingsV1alpha1CallCount() int {
	fake.settingsV1alpha1Mutex.RLock()
	defer fake.settingsV1alpha1Mutex.RUnlock()
	return len(fake.settingsV1alpha1ArgsForCall)
}

func (fake *FakeK8sInterface) SettingsV1alpha1Returns(result1 settingsv1alpha1.SettingsV1alpha1Interface) {
	fake.SettingsV1alpha1Stub = nil
	fake.settingsV1alpha1Returns = struct {
		result1 settingsv1alpha1.SettingsV1alpha1Interface
	}{result1}
}

func (fake *FakeK8sInterface) SettingsV1alpha1ReturnsOnCall(i int, result1 settingsv1alpha1.SettingsV1alpha1Interface) {
	fake.SettingsV1alpha1Stub = nil
	if fake.settingsV1alpha1ReturnsOnCall == nil {
		fake.settingsV1alpha1ReturnsOnCall = make(map[int]struct {
			result1 settingsv1alpha1.SettingsV1alpha1Interface
		})
	}
	fake.settingsV1alpha1ReturnsOnCall[i] = struct {
		result1 settingsv1alpha1.SettingsV1alpha1Interface
	}{result1}
}

func (fake *FakeK8sInterface) Settings() settingsv1alpha1.SettingsV1alpha1Interface {
	fake.settingsMutex.Lock()
	ret, specificReturn := fake.settingsReturnsOnCall[len(fake.settingsArgsForCall)]
	fake.settingsArgsForCall = append(fake.settingsArgsForCall, struct{}{})
	fake.recordInvocation("Settings", []interface{}{})
	fake.settingsMutex.Unlock()
	if fake.SettingsStub != nil {
		return fake.SettingsStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.settingsReturns.result1
}

func (fake *FakeK8sInterface) SettingsCallCount() int {
	fake.settingsMutex.RLock()
	defer fake.settingsMutex.RUnlock()
	return len(fake.settingsArgsForCall)
}

func (fake *FakeK8sInterface) SettingsReturns(result1 settingsv1alpha1.SettingsV1alpha1Interface) {
	fake.SettingsStub = nil
	fake.settingsReturns = struct {
		result1 settingsv1alpha1.SettingsV1alpha1Interface
	}{result1}
}

func (fake *FakeK8sInterface) SettingsReturnsOnCall(i int, result1 settingsv1alpha1.SettingsV1alpha1Interface) {
	fake.SettingsStub = nil
	if fake.settingsReturnsOnCall == nil {
		fake.settingsReturnsOnCall = make(map[int]struct {
			result1 settingsv1alpha1.SettingsV1alpha1Interface
		})
	}
	fake.settingsReturnsOnCall[i] = struct {
		result1 settingsv1alpha1.SettingsV1alpha1Interface
	}{result1}
}

func (fake *FakeK8sInterface) StorageV1beta1() storagev1beta1.StorageV1beta1Interface {
	fake.storageV1beta1Mutex.Lock()
	ret, specificReturn := fake.storageV1beta1ReturnsOnCall[len(fake.storageV1beta1ArgsForCall)]
	fake.storageV1beta1ArgsForCall = append(fake.storageV1beta1ArgsForCall, struct{}{})
	fake.recordInvocation("StorageV1beta1", []interface{}{})
	fake.storageV1beta1Mutex.Unlock()
	if fake.StorageV1beta1Stub != nil {
		return fake.StorageV1beta1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.storageV1beta1Returns.result1
}

func (fake *FakeK8sInterface) StorageV1beta1CallCount() int {
	fake.storageV1beta1Mutex.RLock()
	defer fake.storageV1beta1Mutex.RUnlock()
	return len(fake.storageV1beta1ArgsForCall)
}

func (fake *FakeK8sInterface) StorageV1beta1Returns(result1 storagev1beta1.StorageV1beta1Interface) {
	fake.StorageV1beta1Stub = nil
	fake.storageV1beta1Returns = struct {
		result1 storagev1beta1.StorageV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) StorageV1beta1ReturnsOnCall(i int, result1 storagev1beta1.StorageV1beta1Interface) {
	fake.StorageV1beta1Stub = nil
	if fake.storageV1beta1ReturnsOnCall == nil {
		fake.storageV1beta1ReturnsOnCall = make(map[int]struct {
			result1 storagev1beta1.StorageV1beta1Interface
		})
	}
	fake.storageV1beta1ReturnsOnCall[i] = struct {
		result1 storagev1beta1.StorageV1beta1Interface
	}{result1}
}

func (fake *FakeK8sInterface) StorageV1() storagev1.StorageV1Interface {
	fake.storageV1Mutex.Lock()
	ret, specificReturn := fake.storageV1ReturnsOnCall[len(fake.storageV1ArgsForCall)]
	fake.storageV1ArgsForCall = append(fake.storageV1ArgsForCall, struct{}{})
	fake.recordInvocation("StorageV1", []interface{}{})
	fake.storageV1Mutex.Unlock()
	if fake.StorageV1Stub != nil {
		return fake.StorageV1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.storageV1Returns.result1
}

func (fake *FakeK8sInterface) StorageV1CallCount() int {
	fake.storageV1Mutex.RLock()
	defer fake.storageV1Mutex.RUnlock()
	return len(fake.storageV1ArgsForCall)
}

func (fake *FakeK8sInterface) StorageV1Returns(result1 storagev1.StorageV1Interface) {
	fake.StorageV1Stub = nil
	fake.storageV1Returns = struct {
		result1 storagev1.StorageV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) StorageV1ReturnsOnCall(i int, result1 storagev1.StorageV1Interface) {
	fake.StorageV1Stub = nil
	if fake.storageV1ReturnsOnCall == nil {
		fake.storageV1ReturnsOnCall = make(map[int]struct {
			result1 storagev1.StorageV1Interface
		})
	}
	fake.storageV1ReturnsOnCall[i] = struct {
		result1 storagev1.StorageV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) Storage() storagev1.StorageV1Interface {
	fake.storageMutex.Lock()
	ret, specificReturn := fake.storageReturnsOnCall[len(fake.storageArgsForCall)]
	fake.storageArgsForCall = append(fake.storageArgsForCall, struct{}{})
	fake.recordInvocation("Storage", []interface{}{})
	fake.storageMutex.Unlock()
	if fake.StorageStub != nil {
		return fake.StorageStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.storageReturns.result1
}

func (fake *FakeK8sInterface) StorageCallCount() int {
	fake.storageMutex.RLock()
	defer fake.storageMutex.RUnlock()
	return len(fake.storageArgsForCall)
}

func (fake *FakeK8sInterface) StorageReturns(result1 storagev1.StorageV1Interface) {
	fake.StorageStub = nil
	fake.storageReturns = struct {
		result1 storagev1.StorageV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) StorageReturnsOnCall(i int, result1 storagev1.StorageV1Interface) {
	fake.StorageStub = nil
	if fake.storageReturnsOnCall == nil {
		fake.storageReturnsOnCall = make(map[int]struct {
			result1 storagev1.StorageV1Interface
		})
	}
	fake.storageReturnsOnCall[i] = struct {
		result1 storagev1.StorageV1Interface
	}{result1}
}

func (fake *FakeK8sInterface) StorageV1alpha1() storagev1alpha1.StorageV1alpha1Interface {
	fake.storageV1alpha1Mutex.Lock()
	ret, specificReturn := fake.storageV1alpha1ReturnsOnCall[len(fake.storageV1alpha1ArgsForCall)]
	fake.storageV1alpha1ArgsForCall = append(fake.storageV1alpha1ArgsForCall, struct{}{})
	fake.recordInvocation("StorageV1alpha1", []interface{}{})
	fake.storageV1alpha1Mutex.Unlock()
	if fake.StorageV1alpha1Stub != nil {
		return fake.StorageV1alpha1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.storageV1alpha1Returns.result1
}

func (fake *FakeK8sInterface) StorageV1alpha1CallCount() int {
	fake.storageV1alpha1Mutex.RLock()
	defer fake.storageV1alpha1Mutex.RUnlock()
	return len(fake.storageV1alpha1ArgsForCall)
}

func (fake *FakeK8sInterface) StorageV1alpha1Returns(result1 storagev1alpha1.StorageV1alpha1Interface) {
	fake.StorageV1alpha1Stub = nil
	fake.storageV1alpha1Returns = struct {
		result1 storagev1alpha1.StorageV1alpha1Interface
	}{result1}
}

func (fake *FakeK8sInterface) StorageV1alpha1ReturnsOnCall(i int, result1 storagev1alpha1.StorageV1alpha1Interface) {
	fake.StorageV1alpha1Stub = nil
	if fake.storageV1alpha1ReturnsOnCall == nil {
		fake.storageV1alpha1ReturnsOnCall = make(map[int]struct {
			result1 storagev1alpha1.StorageV1alpha1Interface
		})
	}
	fake.storageV1alpha1ReturnsOnCall[i] = struct {
		result1 storagev1alpha1.StorageV1alpha1Interface
	}{result1}
}

func (fake *FakeK8sInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.discoveryMutex.RLock()
	defer fake.discoveryMutex.RUnlock()
	fake.admissionregistrationV1alpha1Mutex.RLock()
	defer fake.admissionregistrationV1alpha1Mutex.RUnlock()
	fake.admissionregistrationV1beta1Mutex.RLock()
	defer fake.admissionregistrationV1beta1Mutex.RUnlock()
	fake.admissionregistrationMutex.RLock()
	defer fake.admissionregistrationMutex.RUnlock()
	fake.appsV1beta1Mutex.RLock()
	defer fake.appsV1beta1Mutex.RUnlock()
	fake.appsV1beta2Mutex.RLock()
	defer fake.appsV1beta2Mutex.RUnlock()
	fake.appsV1Mutex.RLock()
	defer fake.appsV1Mutex.RUnlock()
	fake.appsMutex.RLock()
	defer fake.appsMutex.RUnlock()
	fake.authenticationV1Mutex.RLock()
	defer fake.authenticationV1Mutex.RUnlock()
	fake.authenticationMutex.RLock()
	defer fake.authenticationMutex.RUnlock()
	fake.authenticationV1beta1Mutex.RLock()
	defer fake.authenticationV1beta1Mutex.RUnlock()
	fake.authorizationV1Mutex.RLock()
	defer fake.authorizationV1Mutex.RUnlock()
	fake.authorizationMutex.RLock()
	defer fake.authorizationMutex.RUnlock()
	fake.authorizationV1beta1Mutex.RLock()
	defer fake.authorizationV1beta1Mutex.RUnlock()
	fake.autoscalingV1Mutex.RLock()
	defer fake.autoscalingV1Mutex.RUnlock()
	fake.autoscalingMutex.RLock()
	defer fake.autoscalingMutex.RUnlock()
	fake.autoscalingV2beta1Mutex.RLock()
	defer fake.autoscalingV2beta1Mutex.RUnlock()
	fake.batchV1Mutex.RLock()
	defer fake.batchV1Mutex.RUnlock()
	fake.batchMutex.RLock()
	defer fake.batchMutex.RUnlock()
	fake.batchV1beta1Mutex.RLock()
	defer fake.batchV1beta1Mutex.RUnlock()
	fake.batchV2alpha1Mutex.RLock()
	defer fake.batchV2alpha1Mutex.RUnlock()
	fake.certificatesV1beta1Mutex.RLock()
	defer fake.certificatesV1beta1Mutex.RUnlock()
	fake.certificatesMutex.RLock()
	defer fake.certificatesMutex.RUnlock()
	fake.coreV1Mutex.RLock()
	defer fake.coreV1Mutex.RUnlock()
	fake.coreMutex.RLock()
	defer fake.coreMutex.RUnlock()
	fake.eventsV1beta1Mutex.RLock()
	defer fake.eventsV1beta1Mutex.RUnlock()
	fake.eventsMutex.RLock()
	defer fake.eventsMutex.RUnlock()
	fake.extensionsV1beta1Mutex.RLock()
	defer fake.extensionsV1beta1Mutex.RUnlock()
	fake.extensionsMutex.RLock()
	defer fake.extensionsMutex.RUnlock()
	fake.networkingV1Mutex.RLock()
	defer fake.networkingV1Mutex.RUnlock()
	fake.networkingMutex.RLock()
	defer fake.networkingMutex.RUnlock()
	fake.policyV1beta1Mutex.RLock()
	defer fake.policyV1beta1Mutex.RUnlock()
	fake.policyMutex.RLock()
	defer fake.policyMutex.RUnlock()
	fake.rbacV1Mutex.RLock()
	defer fake.rbacV1Mutex.RUnlock()
	fake.rbacMutex.RLock()
	defer fake.rbacMutex.RUnlock()
	fake.rbacV1beta1Mutex.RLock()
	defer fake.rbacV1beta1Mutex.RUnlock()
	fake.rbacV1alpha1Mutex.RLock()
	defer fake.rbacV1alpha1Mutex.RUnlock()
	fake.schedulingV1alpha1Mutex.RLock()
	defer fake.schedulingV1alpha1Mutex.RUnlock()
	fake.schedulingMutex.RLock()
	defer fake.schedulingMutex.RUnlock()
	fake.settingsV1alpha1Mutex.RLock()
	defer fake.settingsV1alpha1Mutex.RUnlock()
	fake.settingsMutex.RLock()
	defer fake.settingsMutex.RUnlock()
	fake.storageV1beta1Mutex.RLock()
	defer fake.storageV1beta1Mutex.RUnlock()
	fake.storageV1Mutex.RLock()
	defer fake.storageV1Mutex.RUnlock()
	fake.storageMutex.RLock()
	defer fake.storageMutex.RUnlock()
	fake.storageV1alpha1Mutex.RLock()
	defer fake.storageV1alpha1Mutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeK8sInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kubernetes.Interface = new(FakeK8sInterface)
