// Code generated by counterfeiter. DO NOT EDIT.
package repositoryfakes

import (
	"sync"

	"github.com/cf-platform-eng/kibosh/pkg/helm"
	"github.com/cf-platform-eng/kibosh/pkg/repository"
)

type FakeRepository struct {
	ClearCacheStub        func() error
	clearCacheMutex       sync.RWMutex
	clearCacheArgsForCall []struct {
	}
	clearCacheReturns struct {
		result1 error
	}
	clearCacheReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteChartStub        func(string) error
	deleteChartMutex       sync.RWMutex
	deleteChartArgsForCall []struct {
		arg1 string
	}
	deleteChartReturns struct {
		result1 error
	}
	deleteChartReturnsOnCall map[int]struct {
		result1 error
	}
	GetChartsStub        func() ([]*helm.MyChart, error)
	getChartsMutex       sync.RWMutex
	getChartsArgsForCall []struct {
	}
	getChartsReturns struct {
		result1 []*helm.MyChart
		result2 error
	}
	getChartsReturnsOnCall map[int]struct {
		result1 []*helm.MyChart
		result2 error
	}
	SaveChartStub        func(string) error
	saveChartMutex       sync.RWMutex
	saveChartArgsForCall []struct {
		arg1 string
	}
	saveChartReturns struct {
		result1 error
	}
	saveChartReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepository) ClearCache() error {
	fake.clearCacheMutex.Lock()
	ret, specificReturn := fake.clearCacheReturnsOnCall[len(fake.clearCacheArgsForCall)]
	fake.clearCacheArgsForCall = append(fake.clearCacheArgsForCall, struct {
	}{})
	fake.recordInvocation("ClearCache", []interface{}{})
	fake.clearCacheMutex.Unlock()
	if fake.ClearCacheStub != nil {
		return fake.ClearCacheStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.clearCacheReturns
	return fakeReturns.result1
}

func (fake *FakeRepository) ClearCacheCallCount() int {
	fake.clearCacheMutex.RLock()
	defer fake.clearCacheMutex.RUnlock()
	return len(fake.clearCacheArgsForCall)
}

func (fake *FakeRepository) ClearCacheCalls(stub func() error) {
	fake.clearCacheMutex.Lock()
	defer fake.clearCacheMutex.Unlock()
	fake.ClearCacheStub = stub
}

func (fake *FakeRepository) ClearCacheReturns(result1 error) {
	fake.clearCacheMutex.Lock()
	defer fake.clearCacheMutex.Unlock()
	fake.ClearCacheStub = nil
	fake.clearCacheReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) ClearCacheReturnsOnCall(i int, result1 error) {
	fake.clearCacheMutex.Lock()
	defer fake.clearCacheMutex.Unlock()
	fake.ClearCacheStub = nil
	if fake.clearCacheReturnsOnCall == nil {
		fake.clearCacheReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.clearCacheReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) DeleteChart(arg1 string) error {
	fake.deleteChartMutex.Lock()
	ret, specificReturn := fake.deleteChartReturnsOnCall[len(fake.deleteChartArgsForCall)]
	fake.deleteChartArgsForCall = append(fake.deleteChartArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteChart", []interface{}{arg1})
	fake.deleteChartMutex.Unlock()
	if fake.DeleteChartStub != nil {
		return fake.DeleteChartStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteChartReturns
	return fakeReturns.result1
}

func (fake *FakeRepository) DeleteChartCallCount() int {
	fake.deleteChartMutex.RLock()
	defer fake.deleteChartMutex.RUnlock()
	return len(fake.deleteChartArgsForCall)
}

func (fake *FakeRepository) DeleteChartCalls(stub func(string) error) {
	fake.deleteChartMutex.Lock()
	defer fake.deleteChartMutex.Unlock()
	fake.DeleteChartStub = stub
}

func (fake *FakeRepository) DeleteChartArgsForCall(i int) string {
	fake.deleteChartMutex.RLock()
	defer fake.deleteChartMutex.RUnlock()
	argsForCall := fake.deleteChartArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRepository) DeleteChartReturns(result1 error) {
	fake.deleteChartMutex.Lock()
	defer fake.deleteChartMutex.Unlock()
	fake.DeleteChartStub = nil
	fake.deleteChartReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) DeleteChartReturnsOnCall(i int, result1 error) {
	fake.deleteChartMutex.Lock()
	defer fake.deleteChartMutex.Unlock()
	fake.DeleteChartStub = nil
	if fake.deleteChartReturnsOnCall == nil {
		fake.deleteChartReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteChartReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) GetCharts() ([]*helm.MyChart, error) {
	fake.getChartsMutex.Lock()
	ret, specificReturn := fake.getChartsReturnsOnCall[len(fake.getChartsArgsForCall)]
	fake.getChartsArgsForCall = append(fake.getChartsArgsForCall, struct {
	}{})
	fake.recordInvocation("GetCharts", []interface{}{})
	fake.getChartsMutex.Unlock()
	if fake.GetChartsStub != nil {
		return fake.GetChartsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getChartsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRepository) GetChartsCallCount() int {
	fake.getChartsMutex.RLock()
	defer fake.getChartsMutex.RUnlock()
	return len(fake.getChartsArgsForCall)
}

func (fake *FakeRepository) GetChartsCalls(stub func() ([]*helm.MyChart, error)) {
	fake.getChartsMutex.Lock()
	defer fake.getChartsMutex.Unlock()
	fake.GetChartsStub = stub
}

func (fake *FakeRepository) GetChartsReturns(result1 []*helm.MyChart, result2 error) {
	fake.getChartsMutex.Lock()
	defer fake.getChartsMutex.Unlock()
	fake.GetChartsStub = nil
	fake.getChartsReturns = struct {
		result1 []*helm.MyChart
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) GetChartsReturnsOnCall(i int, result1 []*helm.MyChart, result2 error) {
	fake.getChartsMutex.Lock()
	defer fake.getChartsMutex.Unlock()
	fake.GetChartsStub = nil
	if fake.getChartsReturnsOnCall == nil {
		fake.getChartsReturnsOnCall = make(map[int]struct {
			result1 []*helm.MyChart
			result2 error
		})
	}
	fake.getChartsReturnsOnCall[i] = struct {
		result1 []*helm.MyChart
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) SaveChart(arg1 string) error {
	fake.saveChartMutex.Lock()
	ret, specificReturn := fake.saveChartReturnsOnCall[len(fake.saveChartArgsForCall)]
	fake.saveChartArgsForCall = append(fake.saveChartArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("SaveChart", []interface{}{arg1})
	fake.saveChartMutex.Unlock()
	if fake.SaveChartStub != nil {
		return fake.SaveChartStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.saveChartReturns
	return fakeReturns.result1
}

func (fake *FakeRepository) SaveChartCallCount() int {
	fake.saveChartMutex.RLock()
	defer fake.saveChartMutex.RUnlock()
	return len(fake.saveChartArgsForCall)
}

func (fake *FakeRepository) SaveChartCalls(stub func(string) error) {
	fake.saveChartMutex.Lock()
	defer fake.saveChartMutex.Unlock()
	fake.SaveChartStub = stub
}

func (fake *FakeRepository) SaveChartArgsForCall(i int) string {
	fake.saveChartMutex.RLock()
	defer fake.saveChartMutex.RUnlock()
	argsForCall := fake.saveChartArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRepository) SaveChartReturns(result1 error) {
	fake.saveChartMutex.Lock()
	defer fake.saveChartMutex.Unlock()
	fake.SaveChartStub = nil
	fake.saveChartReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) SaveChartReturnsOnCall(i int, result1 error) {
	fake.saveChartMutex.Lock()
	defer fake.saveChartMutex.Unlock()
	fake.SaveChartStub = nil
	if fake.saveChartReturnsOnCall == nil {
		fake.saveChartReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveChartReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.clearCacheMutex.RLock()
	defer fake.clearCacheMutex.RUnlock()
	fake.deleteChartMutex.RLock()
	defer fake.deleteChartMutex.RUnlock()
	fake.getChartsMutex.RLock()
	defer fake.getChartsMutex.RUnlock()
	fake.saveChartMutex.RLock()
	defer fake.saveChartMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repository.Repository = new(FakeRepository)
