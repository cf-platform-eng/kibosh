// Code generated by counterfeiter. DO NOT EDIT.
package k8sfakes

import (
	"sync"

	"github.com/cf-platform-eng/kibosh/pkg/config"
	"github.com/cf-platform-eng/kibosh/pkg/k8s"
	k8sAPI "k8s.io/client-go/tools/clientcmd/api"
)

type FakeClusterFactory struct {
	DefaultClusterStub        func() (k8s.Cluster, error)
	defaultClusterMutex       sync.RWMutex
	defaultClusterArgsForCall []struct{}
	defaultClusterReturns     struct {
		result1 k8s.Cluster
		result2 error
	}
	defaultClusterReturnsOnCall map[int]struct {
		result1 k8s.Cluster
		result2 error
	}
	GetClusterStub        func(creds *config.ClusterCredentials) (k8s.Cluster, error)
	getClusterMutex       sync.RWMutex
	getClusterArgsForCall []struct {
		creds *config.ClusterCredentials
	}
	getClusterReturns struct {
		result1 k8s.Cluster
		result2 error
	}
	getClusterReturnsOnCall map[int]struct {
		result1 k8s.Cluster
		result2 error
	}
	GetClusterFromK8sConfigStub        func(k8sConfig *k8sAPI.Config) (k8s.Cluster, error)
	getClusterFromK8sConfigMutex       sync.RWMutex
	getClusterFromK8sConfigArgsForCall []struct {
		k8sConfig *k8sAPI.Config
	}
	getClusterFromK8sConfigReturns struct {
		result1 k8s.Cluster
		result2 error
	}
	getClusterFromK8sConfigReturnsOnCall map[int]struct {
		result1 k8s.Cluster
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClusterFactory) DefaultCluster() (k8s.Cluster, error) {
	fake.defaultClusterMutex.Lock()
	ret, specificReturn := fake.defaultClusterReturnsOnCall[len(fake.defaultClusterArgsForCall)]
	fake.defaultClusterArgsForCall = append(fake.defaultClusterArgsForCall, struct{}{})
	fake.recordInvocation("DefaultCluster", []interface{}{})
	fake.defaultClusterMutex.Unlock()
	if fake.DefaultClusterStub != nil {
		return fake.DefaultClusterStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.defaultClusterReturns.result1, fake.defaultClusterReturns.result2
}

func (fake *FakeClusterFactory) DefaultClusterCallCount() int {
	fake.defaultClusterMutex.RLock()
	defer fake.defaultClusterMutex.RUnlock()
	return len(fake.defaultClusterArgsForCall)
}

func (fake *FakeClusterFactory) DefaultClusterReturns(result1 k8s.Cluster, result2 error) {
	fake.DefaultClusterStub = nil
	fake.defaultClusterReturns = struct {
		result1 k8s.Cluster
		result2 error
	}{result1, result2}
}

func (fake *FakeClusterFactory) DefaultClusterReturnsOnCall(i int, result1 k8s.Cluster, result2 error) {
	fake.DefaultClusterStub = nil
	if fake.defaultClusterReturnsOnCall == nil {
		fake.defaultClusterReturnsOnCall = make(map[int]struct {
			result1 k8s.Cluster
			result2 error
		})
	}
	fake.defaultClusterReturnsOnCall[i] = struct {
		result1 k8s.Cluster
		result2 error
	}{result1, result2}
}

func (fake *FakeClusterFactory) GetCluster(creds *config.ClusterCredentials) (k8s.Cluster, error) {
	fake.getClusterMutex.Lock()
	ret, specificReturn := fake.getClusterReturnsOnCall[len(fake.getClusterArgsForCall)]
	fake.getClusterArgsForCall = append(fake.getClusterArgsForCall, struct {
		creds *config.ClusterCredentials
	}{creds})
	fake.recordInvocation("GetCluster", []interface{}{creds})
	fake.getClusterMutex.Unlock()
	if fake.GetClusterStub != nil {
		return fake.GetClusterStub(creds)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getClusterReturns.result1, fake.getClusterReturns.result2
}

func (fake *FakeClusterFactory) GetClusterCallCount() int {
	fake.getClusterMutex.RLock()
	defer fake.getClusterMutex.RUnlock()
	return len(fake.getClusterArgsForCall)
}

func (fake *FakeClusterFactory) GetClusterArgsForCall(i int) *config.ClusterCredentials {
	fake.getClusterMutex.RLock()
	defer fake.getClusterMutex.RUnlock()
	return fake.getClusterArgsForCall[i].creds
}

func (fake *FakeClusterFactory) GetClusterReturns(result1 k8s.Cluster, result2 error) {
	fake.GetClusterStub = nil
	fake.getClusterReturns = struct {
		result1 k8s.Cluster
		result2 error
	}{result1, result2}
}

func (fake *FakeClusterFactory) GetClusterReturnsOnCall(i int, result1 k8s.Cluster, result2 error) {
	fake.GetClusterStub = nil
	if fake.getClusterReturnsOnCall == nil {
		fake.getClusterReturnsOnCall = make(map[int]struct {
			result1 k8s.Cluster
			result2 error
		})
	}
	fake.getClusterReturnsOnCall[i] = struct {
		result1 k8s.Cluster
		result2 error
	}{result1, result2}
}

func (fake *FakeClusterFactory) GetClusterFromK8sConfig(k8sConfig *k8sAPI.Config) (k8s.Cluster, error) {
	fake.getClusterFromK8sConfigMutex.Lock()
	ret, specificReturn := fake.getClusterFromK8sConfigReturnsOnCall[len(fake.getClusterFromK8sConfigArgsForCall)]
	fake.getClusterFromK8sConfigArgsForCall = append(fake.getClusterFromK8sConfigArgsForCall, struct {
		k8sConfig *k8sAPI.Config
	}{k8sConfig})
	fake.recordInvocation("GetClusterFromK8sConfig", []interface{}{k8sConfig})
	fake.getClusterFromK8sConfigMutex.Unlock()
	if fake.GetClusterFromK8sConfigStub != nil {
		return fake.GetClusterFromK8sConfigStub(k8sConfig)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getClusterFromK8sConfigReturns.result1, fake.getClusterFromK8sConfigReturns.result2
}

func (fake *FakeClusterFactory) GetClusterFromK8sConfigCallCount() int {
	fake.getClusterFromK8sConfigMutex.RLock()
	defer fake.getClusterFromK8sConfigMutex.RUnlock()
	return len(fake.getClusterFromK8sConfigArgsForCall)
}

func (fake *FakeClusterFactory) GetClusterFromK8sConfigArgsForCall(i int) *k8sAPI.Config {
	fake.getClusterFromK8sConfigMutex.RLock()
	defer fake.getClusterFromK8sConfigMutex.RUnlock()
	return fake.getClusterFromK8sConfigArgsForCall[i].k8sConfig
}

func (fake *FakeClusterFactory) GetClusterFromK8sConfigReturns(result1 k8s.Cluster, result2 error) {
	fake.GetClusterFromK8sConfigStub = nil
	fake.getClusterFromK8sConfigReturns = struct {
		result1 k8s.Cluster
		result2 error
	}{result1, result2}
}

func (fake *FakeClusterFactory) GetClusterFromK8sConfigReturnsOnCall(i int, result1 k8s.Cluster, result2 error) {
	fake.GetClusterFromK8sConfigStub = nil
	if fake.getClusterFromK8sConfigReturnsOnCall == nil {
		fake.getClusterFromK8sConfigReturnsOnCall = make(map[int]struct {
			result1 k8s.Cluster
			result2 error
		})
	}
	fake.getClusterFromK8sConfigReturnsOnCall[i] = struct {
		result1 k8s.Cluster
		result2 error
	}{result1, result2}
}

func (fake *FakeClusterFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.defaultClusterMutex.RLock()
	defer fake.defaultClusterMutex.RUnlock()
	fake.getClusterMutex.RLock()
	defer fake.getClusterMutex.RUnlock()
	fake.getClusterFromK8sConfigMutex.RLock()
	defer fake.getClusterFromK8sConfigMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClusterFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ k8s.ClusterFactory = new(FakeClusterFactory)
